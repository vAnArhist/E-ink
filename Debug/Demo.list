
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08005a00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005a00  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116e8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002916  00000000  00000000  00031788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  000340a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022798  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1e6  00000000  00000000  000581b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4ae3  00000000  00000000  0006539e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  00129efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004434 	.word	0x08004434

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08004434 	.word	0x08004434

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f93c 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f002 fe79 	bl	80031e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d022      	beq.n	8000556 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_InitTick+0x6c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f93c 	bl	80007a2 <HAL_SYSTICK_Config>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10f      	bne.n	8000550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d809      	bhi.n	800054a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800053e:	f000 f914 	bl	800076a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e007      	b.n	800055a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e004      	b.n	800055a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x1c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x1c>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000098 	.word	0x20000098
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000098 	.word	0x20000098

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d004      	beq.n	80005d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d0:	bf00      	nop
 80005d2:	f7ff ffdf 	bl	8000594 <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8f7      	bhi.n	80005d2 <HAL_Delay+0x26>
  {
  }
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e148      	b.n	8000a5e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 813a 	beq.w	8000a58 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d00b      	beq.n	8000804 <HAL_GPIO_Init+0x48>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d007      	beq.n	8000804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f8:	2b11      	cmp	r3, #17
 80007fa:	d003      	beq.n	8000804 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b12      	cmp	r3, #18
 8000802:	d130      	bne.n	8000866 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2203      	movs	r2, #3
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4313      	orrs	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800083a:	2201      	movs	r2, #1
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	091b      	lsrs	r3, r3, #4
 8000850:	f003 0201 	and.w	r2, r3, #1
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	689a      	ldr	r2, [r3, #8]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d003      	beq.n	80008a6 <HAL_GPIO_Init+0xea>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b12      	cmp	r3, #18
 80008a4:	d123      	bne.n	80008ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3208      	adds	r2, #8
 80008ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	220f      	movs	r2, #15
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3208      	adds	r2, #8
 80008e8:	6939      	ldr	r1, [r7, #16]
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0203 	and.w	r2, r3, #3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8094 	beq.w	8000a58 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6613      	str	r3, [r2, #96]	; 0x60
 800093c:	4b4f      	ldr	r3, [pc, #316]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000948:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <HAL_GPIO_Init+0x2c4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	220f      	movs	r2, #15
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000972:	d00d      	beq.n	8000990 <HAL_GPIO_Init+0x1d4>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <HAL_GPIO_Init+0x2c8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d007      	beq.n	800098c <HAL_GPIO_Init+0x1d0>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a42      	ldr	r2, [pc, #264]	; (8000a88 <HAL_GPIO_Init+0x2cc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d101      	bne.n	8000988 <HAL_GPIO_Init+0x1cc>
 8000984:	2302      	movs	r3, #2
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 8000988:	2307      	movs	r3, #7
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 8000990:	2300      	movs	r3, #0
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a2:	4937      	ldr	r1, [pc, #220]	; (8000a80 <HAL_GPIO_Init+0x2c4>)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a28:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa22 f303 	lsr.w	r3, r2, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f47f aeaf 	bne.w	80007cc <HAL_GPIO_Init+0x10>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40007000 	.word	0x40007000

08000b10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40007000 	.word	0x40007000

08000b2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b3a:	d130      	bne.n	8000b9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b48:	d038      	beq.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b52:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2232      	movs	r2, #50	; 0x32
 8000b60:	fb02 f303 	mul.w	r3, r2, r3
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b70:	e002      	b.n	8000b78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b84:	d102      	bne.n	8000b8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f2      	bne.n	8000b72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b98:	d110      	bne.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e00f      	b.n	8000bbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000baa:	d007      	beq.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40007000 	.word	0x40007000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	431bde83 	.word	0x431bde83

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f000 bc11 	b.w	800140e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bec:	4ba0      	ldr	r3, [pc, #640]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bf6:	4b9e      	ldr	r3, [pc, #632]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80e4 	beq.w	8000dd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <HAL_RCC_OscConfig+0x4c>
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2b0c      	cmp	r3, #12
 8000c18:	f040 808b 	bne.w	8000d32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	f040 8087 	bne.w	8000d32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c24:	4b92      	ldr	r3, [pc, #584]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d005      	beq.n	8000c3c <HAL_RCC_OscConfig+0x64>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e3e8      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	4b8b      	ldr	r3, [pc, #556]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <HAL_RCC_OscConfig+0x7e>
 8000c4c:	4b88      	ldr	r3, [pc, #544]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c54:	e005      	b.n	8000c62 <HAL_RCC_OscConfig+0x8a>
 8000c56:	4b86      	ldr	r3, [pc, #536]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d223      	bcs.n	8000cae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fd78 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e3c9      	b.n	800140e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a7c      	ldr	r2, [pc, #496]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b7a      	ldr	r3, [pc, #488]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4977      	ldr	r1, [pc, #476]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c94:	4313      	orrs	r3, r2
 8000c96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c98:	4b75      	ldr	r3, [pc, #468]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	4972      	ldr	r1, [pc, #456]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
 8000cac:	e025      	b.n	8000cfa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cae:	4b70      	ldr	r3, [pc, #448]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6f      	ldr	r2, [pc, #444]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b6d      	ldr	r3, [pc, #436]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	496a      	ldr	r1, [pc, #424]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ccc:	4b68      	ldr	r3, [pc, #416]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	4965      	ldr	r1, [pc, #404]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d109      	bne.n	8000cfa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fd38 	bl	8001760 <RCC_SetFlashLatencyFromMSIRange>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e389      	b.n	800140e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cfa:	f000 fc6f 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	4a5a      	ldr	r2, [pc, #360]	; (8000e74 <HAL_RCC_OscConfig+0x29c>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	fa21 f303 	lsr.w	r3, r1, r3
 8000d16:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <HAL_RCC_OscConfig+0x2a0>)
 8000d18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d1a:	4b58      	ldr	r3, [pc, #352]	; (8000e7c <HAL_RCC_OscConfig+0x2a4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fbec 	bl	80004fc <HAL_InitTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d052      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	e36d      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d032      	beq.n	8000da0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d46:	f7ff fc25 	bl	8000594 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc21 	bl	8000594 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e356      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6c:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	4935      	ldr	r1, [pc, #212]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]
 8000d9e:	e01a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a32      	ldr	r2, [pc, #200]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fbf2 	bl	8000594 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000db4:	f7ff fbee 	bl	8000594 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e323      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x1dc>
 8000dd2:	e000      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d073      	beq.n	8000eca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d005      	beq.n	8000df4 <HAL_RCC_OscConfig+0x21c>
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	d10e      	bne.n	8000e0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d10b      	bne.n	8000e0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d063      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d15f      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e300      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e14:	d106      	bne.n	8000e24 <HAL_RCC_OscConfig+0x24c>
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0x288>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x270>
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0x288>
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01b      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e68:	f7ff fb94 	bl	8000594 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e6e:	e010      	b.n	8000e92 <HAL_RCC_OscConfig+0x2ba>
 8000e70:	40021000 	.word	0x40021000
 8000e74:	0800454c 	.word	0x0800454c
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fb88 	bl	8000594 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e2bd      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e92:	4baf      	ldr	r3, [pc, #700]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0x2a8>
 8000e9e:	e014      	b.n	8000eca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fb78 	bl	8000594 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fb74 	bl	8000594 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e2a9      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eba:	4ba5      	ldr	r3, [pc, #660]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x2d0>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d060      	beq.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d005      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x310>
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2b0c      	cmp	r3, #12
 8000ee0:	d119      	bne.n	8000f16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d116      	bne.n	8000f16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee8:	4b99      	ldr	r3, [pc, #612]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_OscConfig+0x328>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e286      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	4b93      	ldr	r3, [pc, #588]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	4990      	ldr	r1, [pc, #576]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f14:	e040      	b.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d023      	beq.n	8000f66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f1e:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a8b      	ldr	r2, [pc, #556]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb33 	bl	8000594 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fb2f 	bl	8000594 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e264      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f44:	4b82      	ldr	r3, [pc, #520]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	061b      	lsls	r3, r3, #24
 8000f5e:	497c      	ldr	r1, [pc, #496]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
 8000f64:	e018      	b.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f66:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a79      	ldr	r2, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff fb0f 	bl	8000594 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fb0b 	bl	8000594 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e240      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f8c:	4b70      	ldr	r3, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f0      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d03c      	beq.n	800101e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01c      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fac:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb2:	4a67      	ldr	r2, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fbc:	f7ff faea 	bl	8000594 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fae6 	bl	8000594 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e21b      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fd6:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0ef      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x3ec>
 8000fe4:	e01b      	b.n	800101e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fec:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff6:	f7ff facd 	bl	8000594 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fac9 	bl	8000594 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e1fe      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8001012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1ef      	bne.n	8000ffe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80a6 	beq.w	8001178 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10d      	bne.n	8001058 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	4b44      	ldr	r3, [pc, #272]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6593      	str	r3, [r2, #88]	; 0x58
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001054:	2301      	movs	r3, #1
 8001056:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001058:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <HAL_RCC_OscConfig+0x57c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001060:	2b00      	cmp	r3, #0
 8001062:	d118      	bne.n	8001096 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x57c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x57c>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001070:	f7ff fa90 	bl	8000594 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001078:	f7ff fa8c 	bl	8000594 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1c1      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x57c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d108      	bne.n	80010b0 <HAL_RCC_OscConfig+0x4d8>
 800109e:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a4:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ae:	e024      	b.n	80010fa <HAL_RCC_OscConfig+0x522>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d110      	bne.n	80010da <HAL_RCC_OscConfig+0x502>
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	4a20      	ldr	r2, [pc, #128]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010d8:	e00f      	b.n	80010fa <HAL_RCC_OscConfig+0x522>
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d016      	beq.n	8001130 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001102:	f7ff fa47 	bl	8000594 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fa43 	bl	8000594 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e176      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_OscConfig+0x578>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0ed      	beq.n	800110a <HAL_RCC_OscConfig+0x532>
 800112e:	e01a      	b.n	8001166 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fa30 	bl	8000594 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001136:	e00f      	b.n	8001158 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f7ff fa2c 	bl	8000594 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f241 3288 	movw	r2, #5000	; 0x1388
 8001146:	4293      	cmp	r3, r2
 8001148:	d906      	bls.n	8001158 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e15f      	b.n	800140e <HAL_RCC_OscConfig+0x836>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001158:	4baa      	ldr	r3, [pc, #680]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800115a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e8      	bne.n	8001138 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116c:	4ba5      	ldr	r3, [pc, #660]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4aa4      	ldr	r2, [pc, #656]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d03c      	beq.n	80011fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800118c:	4b9d      	ldr	r3, [pc, #628]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800118e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001192:	4a9c      	ldr	r2, [pc, #624]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff f9fa 	bl	8000594 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011a4:	f7ff f9f6 	bl	8000594 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e12b      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011b6:	4b93      	ldr	r3, [pc, #588]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80011b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0ef      	beq.n	80011a4 <HAL_RCC_OscConfig+0x5cc>
 80011c4:	e01b      	b.n	80011fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011c6:	4b8f      	ldr	r3, [pc, #572]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80011c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011cc:	4a8d      	ldr	r2, [pc, #564]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d6:	f7ff f9dd 	bl	8000594 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011de:	f7ff f9d9 	bl	8000594 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e10e      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011f0:	4b84      	ldr	r3, [pc, #528]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80011f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ef      	bne.n	80011de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8102 	beq.w	800140c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	2b02      	cmp	r3, #2
 800120e:	f040 80c5 	bne.w	800139c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0203 	and.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	429a      	cmp	r2, r3
 8001224:	d12c      	bne.n	8001280 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	3b01      	subs	r3, #1
 8001232:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d123      	bne.n	8001280 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d11b      	bne.n	8001280 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001252:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d113      	bne.n	8001280 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	3b01      	subs	r3, #1
 8001266:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001268:	429a      	cmp	r2, r3
 800126a:	d109      	bne.n	8001280 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	3b01      	subs	r3, #1
 800127a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d067      	beq.n	8001350 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d062      	beq.n	800134c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001286:	4b5f      	ldr	r3, [pc, #380]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0bb      	b.n	800140e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001296:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a5a      	ldr	r2, [pc, #360]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800129c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012a2:	f7ff f977 	bl	8000594 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff f973 	bl	8000594 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0a8      	b.n	800140e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <HAL_RCC_OscConfig+0x830>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012d8:	3a01      	subs	r2, #1
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012e2:	0212      	lsls	r2, r2, #8
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012ea:	0852      	lsrs	r2, r2, #1
 80012ec:	3a01      	subs	r2, #1
 80012ee:	0552      	lsls	r2, r2, #21
 80012f0:	4311      	orrs	r1, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012f6:	0852      	lsrs	r2, r2, #1
 80012f8:	3a01      	subs	r2, #1
 80012fa:	0652      	lsls	r2, r2, #25
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001302:	06d2      	lsls	r2, r2, #27
 8001304:	430a      	orrs	r2, r1
 8001306:	493f      	ldr	r1, [pc, #252]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800130c:	4b3d      	ldr	r3, [pc, #244]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a3c      	ldr	r2, [pc, #240]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001316:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a39      	ldr	r2, [pc, #228]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800131e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001322:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001324:	f7ff f936 	bl	8000594 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff f932 	bl	8000594 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e067      	b.n	800140e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800134a:	e05f      	b.n	800140c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e05e      	b.n	800140e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d157      	bne.n	800140c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001368:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a25      	ldr	r2, [pc, #148]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001374:	f7ff f90e 	bl	8000594 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff f90a 	bl	8000594 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e03f      	b.n	800140e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x7a4>
 800139a:	e037      	b.n	800140c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d02d      	beq.n	80013fe <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d105      	bne.n	80013c6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013c0:	f023 0303 	bic.w	r3, r3, #3
 80013c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013cc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff f8dd 	bl	8000594 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff f8d9 	bl	8000594 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e00e      	b.n	800140e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_RCC_OscConfig+0x82c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x806>
 80013fc:	e006      	b.n	800140c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e005      	b.n	800140e <HAL_RCC_OscConfig+0x836>
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0c8      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d910      	bls.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4961      	ldr	r1, [pc, #388]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b0      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d04c      	beq.n	8001502 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d107      	bne.n	8001480 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001470:	4b56      	ldr	r3, [pc, #344]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d121      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e09e      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d107      	bne.n	8001498 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d115      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e092      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d107      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e086      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b0:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e07e      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 0203 	bic.w	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	493f      	ldr	r1, [pc, #252]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d2:	f7ff f85f 	bl	8000594 <HAL_GetTick>
 80014d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014da:	f7ff f85b 	bl	8000594 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e066      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 020c 	and.w	r2, r3, #12
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	429a      	cmp	r2, r3
 8001500:	d1eb      	bne.n	80014da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	492c      	ldr	r1, [pc, #176]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	d210      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 0207 	bic.w	r2, r3, #7
 8001536:	4924      	ldr	r1, [pc, #144]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1b0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e036      	b.n	80015be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4918      	ldr	r1, [pc, #96]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4910      	ldr	r1, [pc, #64]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800158e:	f000 f825 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8001592:	4601      	mov	r1, r0
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_RCC_ClockConfig+0x1b4>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	fa21 f303 	lsr.w	r3, r1, r3
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffa2 	bl	80004fc <HAL_InitTick>
 80015b8:	4603      	mov	r3, r0
 80015ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80015bc:	7afb      	ldrb	r3, [r7, #11]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	0800454c 	.word	0x0800454c
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x34>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d121      	bne.n	800164e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d11e      	bne.n	800164e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800161e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e005      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10d      	bne.n	8001664 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d102      	bne.n	800165a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	e004      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d101      	bne.n	8001664 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001662:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d133      	bne.n	80016d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0xa4>
 800167a:	2b03      	cmp	r3, #3
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0xaa>
 800167e:	e005      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001682:	617b      	str	r3, [r7, #20]
      break;
 8001684:	e005      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001688:	617b      	str	r3, [r7, #20]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	617b      	str	r3, [r7, #20]
      break;
 8001690:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	3301      	adds	r3, #1
 800169e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	fb02 f203 	mul.w	r2, r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0e5b      	lsrs	r3, r3, #25
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	3301      	adds	r3, #1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016d2:	69bb      	ldr	r3, [r7, #24]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3724      	adds	r7, #36	; 0x24
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08004564 	.word	0x08004564
 80016e8:	00f42400 	.word	0x00f42400
 80016ec:	007a1200 	.word	0x007a1200

080016f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_RCC_GetHCLKFreq+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800170c:	f7ff fff0 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 8001710:	4601      	mov	r1, r0
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	0800455c 	.word	0x0800455c

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001738:	f7ff ffda 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 800173c:	4601      	mov	r1, r0
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0adb      	lsrs	r3, r3, #11
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_RCC_GetPCLK2Freq+0x28>)
 800174a:	5cd3      	ldrb	r3, [r2, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	0800455c 	.word	0x0800455c

08001760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001778:	f7ff f9ca 	bl	8000b10 <HAL_PWREx_GetVoltageRange>
 800177c:	6178      	str	r0, [r7, #20]
 800177e:	e014      	b.n	80017aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001798:	f7ff f9ba 	bl	8000b10 <HAL_PWREx_GetVoltageRange>
 800179c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b0:	d10b      	bne.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d919      	bls.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2ba0      	cmp	r3, #160	; 0xa0
 80017bc:	d902      	bls.n	80017c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017be:	2302      	movs	r3, #2
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e013      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e010      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d902      	bls.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017d0:	2303      	movs	r3, #3
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e00a      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b80      	cmp	r3, #128	; 0x80
 80017da:	d102      	bne.n	80017e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e004      	b.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b70      	cmp	r3, #112	; 0x70
 80017e6:	d101      	bne.n	80017ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e8:	2301      	movs	r3, #1
 80017ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 0207 	bic.w	r2, r3, #7
 80017f4:	4909      	ldr	r1, [pc, #36]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	40022000 	.word	0x40022000

08001820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001828:	2300      	movs	r3, #0
 800182a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800182c:	2300      	movs	r3, #0
 800182e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	2b00      	cmp	r3, #0
 800183a:	d02f      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001844:	d005      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800184a:	d015      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001850:	e00f      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001852:	4bac      	ldr	r3, [pc, #688]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4aab      	ldr	r2, [pc, #684]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800185e:	e00c      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f9dc 	bl	8001c24 <RCCEx_PLLSAI1_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001870:	e003      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	74fb      	strb	r3, [r7, #19]
      break;
 8001876:	e000      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800187a:	7cfb      	ldrb	r3, [r7, #19]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10b      	bne.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001880:	4ba0      	ldr	r3, [pc, #640]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188e:	499d      	ldr	r1, [pc, #628]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001896:	e001      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8099 	beq.w	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018ae:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80018be:	2300      	movs	r3, #0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b8f      	ldr	r3, [pc, #572]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a8e      	ldr	r2, [pc, #568]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
 80018d0:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e0:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a88      	ldr	r2, [pc, #544]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ec:	f7fe fe52 	bl	8000594 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018f2:	e009      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7fe fe4e 	bl	8000594 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d902      	bls.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	74fb      	strb	r3, [r7, #19]
        break;
 8001906:	e005      	b.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001908:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d155      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001924:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01e      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	429a      	cmp	r2, r3
 8001934:	d019      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001936:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001940:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001942:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001952:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001962:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d016      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7fe fe0e 	bl	8000594 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197a:	e00b      	b.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7fe fe0a 	bl	8000594 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d902      	bls.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	74fb      	strb	r3, [r7, #19]
            break;
 8001992:	e006      	b.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001994:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ec      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80019a2:	7cfb      	ldrb	r3, [r7, #19]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10b      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	4953      	ldr	r1, [pc, #332]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019be:	e004      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	74bb      	strb	r3, [r7, #18]
 80019c4:	e001      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ca:	7c7b      	ldrb	r3, [r7, #17]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4943      	ldr	r1, [pc, #268]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a10:	f023 020c 	bic.w	r2, r3, #12
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	493a      	ldr	r1, [pc, #232]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00a      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	4932      	ldr	r1, [pc, #200]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00a      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00a      	beq.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	4921      	ldr	r1, [pc, #132]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	4918      	ldr	r1, [pc, #96]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00a      	beq.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4910      	ldr	r1, [pc, #64]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d02c      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001af4:	d10a      	bne.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4a02      	ldr	r2, [pc, #8]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b00:	60d3      	str	r3, [r2, #12]
 8001b02:	e015      	b.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f881 	bl	8001c24 <RCCEx_PLLSAI1_Config>
 8001b22:	4603      	mov	r3, r0
 8001b24:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001b26:	7cfb      	ldrb	r3, [r7, #19]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d028      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	492d      	ldr	r1, [pc, #180]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b66:	60d3      	str	r3, [r2, #12]
 8001b68:	e011      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b72:	d10c      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f852 	bl	8001c24 <RCCEx_PLLSAI1_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001b84:	7cfb      	ldrb	r3, [r7, #19]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8001b8a:	7cfb      	ldrb	r3, [r7, #19]
 8001b8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01c      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	4915      	ldr	r1, [pc, #84]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f82f 	bl	8001c24 <RCCEx_PLLSAI1_Config>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4904      	ldr	r1, [pc, #16]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001bf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d018      	beq.n	8001c70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d10d      	bne.n	8001c6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
       ||
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001c56:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
       ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d044      	beq.n	8001cf4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e041      	b.n	8001cf4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d00c      	beq.n	8001c92 <RCCEx_PLLSAI1_Config+0x6e>
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d013      	beq.n	8001ca4 <RCCEx_PLLSAI1_Config+0x80>
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d120      	bne.n	8001cc2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c80:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11d      	bne.n	8001cc8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c90:	e01a      	b.n	8001cc8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca2:	e013      	b.n	8001ccc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10f      	bne.n	8001cd0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001cc0:	e006      	b.n	8001cd0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc6:	e004      	b.n	8001cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001cc8:	bf00      	nop
 8001cca:	e002      	b.n	8001cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ccc:	bf00      	nop
 8001cce:	e000      	b.n	8001cd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001cd0:	bf00      	nop
    }

    if(status == HAL_OK)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10d      	bne.n	8001cf4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001cd8:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	430b      	orrs	r3, r1
 8001cee:	4944      	ldr	r1, [pc, #272]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d17c      	bne.n	8001df4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d06:	f7fe fc45 	bl	8000594 <HAL_GetTick>
 8001d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001d0c:	e009      	b.n	8001d22 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d0e:	f7fe fc41 	bl	8000594 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d902      	bls.n	8001d22 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	73fb      	strb	r3, [r7, #15]
        break;
 8001d20:	e005      	b.n	8001d2e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ef      	bne.n	8001d0e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d15f      	bne.n	8001df4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d110      	bne.n	8001d5c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6892      	ldr	r2, [r2, #8]
 8001d4a:	0211      	lsls	r1, r2, #8
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68d2      	ldr	r2, [r2, #12]
 8001d50:	06d2      	lsls	r2, r2, #27
 8001d52:	430a      	orrs	r2, r1
 8001d54:	492a      	ldr	r1, [pc, #168]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	610b      	str	r3, [r1, #16]
 8001d5a:	e027      	b.n	8001dac <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d112      	bne.n	8001d88 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001d6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	0211      	lsls	r1, r2, #8
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6912      	ldr	r2, [r2, #16]
 8001d78:	0852      	lsrs	r2, r2, #1
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0552      	lsls	r2, r2, #21
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	491f      	ldr	r1, [pc, #124]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	610b      	str	r3, [r1, #16]
 8001d86:	e011      	b.n	8001dac <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6892      	ldr	r2, [r2, #8]
 8001d98:	0211      	lsls	r1, r2, #8
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6952      	ldr	r2, [r2, #20]
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0652      	lsls	r2, r2, #25
 8001da4:	430a      	orrs	r2, r1
 8001da6:	4916      	ldr	r1, [pc, #88]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7fe fbec 	bl	8000594 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001dbe:	e009      	b.n	8001dd4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001dc0:	f7fe fbe8 	bl	8000594 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d902      	bls.n	8001dd4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	73fb      	strb	r3, [r7, #15]
          break;
 8001dd2:	e005      	b.n	8001de0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ef      	beq.n	8001dc0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4904      	ldr	r1, [pc, #16]	; (8001e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07c      	b.n	8001f10 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 f995 	bl	8003160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e56:	d902      	bls.n	8001e5e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e002      	b.n	8001e64 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e6c:	d007      	beq.n	8001e7e <HAL_SPI_Init+0x7a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e8e:	d903      	bls.n	8001e98 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
 8001e96:	e002      	b.n	8001e9e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	ea42 0103 	orr.w	r1, r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0204 	and.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	ea42 0103 	orr.w	r1, r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_SPI_Transmit+0x22>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e150      	b.n	80021dc <HAL_SPI_Transmit+0x2c4>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f42:	f7fe fb27 	bl	8000594 <HAL_GetTick>
 8001f46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d002      	beq.n	8001f5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f5c:	e135      	b.n	80021ca <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_SPI_Transmit+0x52>
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f6e:	e12c      	b.n	80021ca <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fba:	d107      	bne.n	8001fcc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d007      	beq.n	8001fea <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ff2:	d94b      	bls.n	800208c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_SPI_Transmit+0xea>
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d13e      	bne.n	8002080 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	1c9a      	adds	r2, r3, #2
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002026:	e02b      	b.n	8002080 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d112      	bne.n	800205c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	881a      	ldrh	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	1c9a      	adds	r2, r3, #2
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800205a:	e011      	b.n	8002080 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205c:	f7fe fa9a 	bl	8000594 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d803      	bhi.n	8002074 <HAL_SPI_Transmit+0x15c>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002072:	d102      	bne.n	800207a <HAL_SPI_Transmit+0x162>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800207e:	e0a4      	b.n	80021ca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ce      	bne.n	8002028 <HAL_SPI_Transmit+0x110>
 800208a:	e07c      	b.n	8002186 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_SPI_Transmit+0x182>
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d170      	bne.n	800217c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d912      	bls.n	80020ca <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	1c9a      	adds	r2, r3, #2
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b02      	subs	r3, #2
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020c8:	e058      	b.n	800217c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80020f0:	e044      	b.n	800217c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d12b      	bne.n	8002158 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d912      	bls.n	8002130 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	1c9a      	adds	r2, r3, #2
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b02      	subs	r3, #2
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800212e:	e025      	b.n	800217c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	330c      	adds	r3, #12
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002156:	e011      	b.n	800217c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002158:	f7fe fa1c 	bl	8000594 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d803      	bhi.n	8002170 <HAL_SPI_Transmit+0x258>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800216e:	d102      	bne.n	8002176 <HAL_SPI_Transmit+0x25e>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d102      	bne.n	800217c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	77fb      	strb	r3, [r7, #31]
          goto error;
 800217a:	e026      	b.n	80021ca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1b5      	bne.n	80020f2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f901 	bl	8002392 <SPI_EndRxTxTransaction>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]
 80021c6:	e000      	b.n	80021ca <HAL_SPI_Transmit+0x2b2>
  }

error:
 80021c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021da:	7ffb      	ldrb	r3, [r7, #31]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021f4:	e04c      	b.n	8002290 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fc:	d048      	beq.n	8002290 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021fe:	f7fe f9c9 	bl	8000594 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d902      	bls.n	8002214 <SPI_WaitFlagStateUntilTimeout+0x30>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d13d      	bne.n	8002290 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800222c:	d111      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002236:	d004      	beq.n	8002242 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d107      	bne.n	8002252 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d10f      	bne.n	800227c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800227a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e00f      	b.n	80022b0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d1a3      	bne.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80022c6:	e057      	b.n	8002378 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80022ce:	d106      	bne.n	80022de <SPI_WaitFifoStateUntilTimeout+0x26>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	330c      	adds	r3, #12
 80022dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e4:	d048      	beq.n	8002378 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022e6:	f7fe f955 	bl	8000594 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d902      	bls.n	80022fc <SPI_WaitFifoStateUntilTimeout+0x44>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d13d      	bne.n	8002378 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800230a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002314:	d111      	bne.n	800233a <SPI_WaitFifoStateUntilTimeout+0x82>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231e:	d004      	beq.n	800232a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002328:	d107      	bne.n	800233a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d10f      	bne.n	8002364 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002362:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e008      	b.n	800238a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d19f      	bne.n	80022c8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff ff84 	bl	80022b8 <SPI_WaitFifoStateUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e027      	b.n	8002416 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff ff07 	bl	80021e4 <SPI_WaitFlagStateUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e014      	b.n	8002416 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff ff5d 	bl	80022b8 <SPI_WaitFifoStateUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e000      	b.n	8002416 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e040      	b.n	80024b2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f001 f805 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2224      	movs	r2, #36	; 0x24
 800244a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f8bf 	bl	80025e0 <UART_SetConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e022      	b.n	80024b2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb99 	bl	8002bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002488:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002498:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fc20 	bl	8002cf0 <UART_CheckIdleState>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	; 0x28
 80024be:	af02      	add	r7, sp, #8
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	f040 8081 	bne.w	80025d6 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_UART_Transmit+0x26>
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e079      	b.n	80025d8 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Transmit+0x38>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e072      	b.n	80025d8 <HAL_UART_Transmit+0x11e>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2221      	movs	r2, #33	; 0x21
 8002504:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002506:	f7fe f845 	bl	8000594 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d108      	bne.n	8002538 <HAL_UART_Transmit+0x7e>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e003      	b.n	8002540 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002548:	e02d      	b.n	80025a6 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc10 	bl	8002d7a <UART_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e039      	b.n	80025d8 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10b      	bne.n	8002582 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002576:	b292      	uxth	r2, r2
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	3302      	adds	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e008      	b.n	8002594 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b292      	uxth	r2, r2
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1cb      	bne.n	800254a <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fbdc 	bl	8002d7a <UART_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e005      	b.n	80025d8 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4bb3      	ldr	r3, [pc, #716]	; (80028e4 <UART_SetConfig+0x304>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261e:	430b      	orrs	r3, r1
 8002620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4aa9      	ldr	r2, [pc, #676]	; (80028e8 <UART_SetConfig+0x308>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	4313      	orrs	r3, r2
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4aa0      	ldr	r2, [pc, #640]	; (80028ec <UART_SetConfig+0x30c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d126      	bne.n	80026be <UART_SetConfig+0xde>
 8002670:	4b9f      	ldr	r3, [pc, #636]	; (80028f0 <UART_SetConfig+0x310>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d81a      	bhi.n	80026b4 <UART_SetConfig+0xd4>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <UART_SetConfig+0xa4>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	08002695 	.word	0x08002695
 8002688:	080026a5 	.word	0x080026a5
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026ad 	.word	0x080026ad
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800269a:	e080      	b.n	800279e <UART_SetConfig+0x1be>
 800269c:	2302      	movs	r3, #2
 800269e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026a2:	e07c      	b.n	800279e <UART_SetConfig+0x1be>
 80026a4:	2304      	movs	r3, #4
 80026a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026aa:	e078      	b.n	800279e <UART_SetConfig+0x1be>
 80026ac:	2308      	movs	r3, #8
 80026ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b2:	e074      	b.n	800279e <UART_SetConfig+0x1be>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ba:	bf00      	nop
 80026bc:	e06f      	b.n	800279e <UART_SetConfig+0x1be>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a8c      	ldr	r2, [pc, #560]	; (80028f4 <UART_SetConfig+0x314>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d138      	bne.n	800273a <UART_SetConfig+0x15a>
 80026c8:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <UART_SetConfig+0x310>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d82c      	bhi.n	8002730 <UART_SetConfig+0x150>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <UART_SetConfig+0xfc>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002711 	.word	0x08002711
 80026e0:	08002731 	.word	0x08002731
 80026e4:	08002731 	.word	0x08002731
 80026e8:	08002731 	.word	0x08002731
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002731 	.word	0x08002731
 80026f4:	08002731 	.word	0x08002731
 80026f8:	08002731 	.word	0x08002731
 80026fc:	08002719 	.word	0x08002719
 8002700:	08002731 	.word	0x08002731
 8002704:	08002731 	.word	0x08002731
 8002708:	08002731 	.word	0x08002731
 800270c:	08002729 	.word	0x08002729
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002716:	e042      	b.n	800279e <UART_SetConfig+0x1be>
 8002718:	2302      	movs	r3, #2
 800271a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800271e:	e03e      	b.n	800279e <UART_SetConfig+0x1be>
 8002720:	2304      	movs	r3, #4
 8002722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002726:	e03a      	b.n	800279e <UART_SetConfig+0x1be>
 8002728:	2308      	movs	r3, #8
 800272a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800272e:	e036      	b.n	800279e <UART_SetConfig+0x1be>
 8002730:	2310      	movs	r3, #16
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002736:	bf00      	nop
 8002738:	e031      	b.n	800279e <UART_SetConfig+0x1be>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <UART_SetConfig+0x308>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d129      	bne.n	8002798 <UART_SetConfig+0x1b8>
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <UART_SetConfig+0x310>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d014      	beq.n	800277e <UART_SetConfig+0x19e>
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	d802      	bhi.n	8002760 <UART_SetConfig+0x180>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <UART_SetConfig+0x18e>
 800275e:	e016      	b.n	800278e <UART_SetConfig+0x1ae>
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002764:	d007      	beq.n	8002776 <UART_SetConfig+0x196>
 8002766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800276a:	d00c      	beq.n	8002786 <UART_SetConfig+0x1a6>
 800276c:	e00f      	b.n	800278e <UART_SetConfig+0x1ae>
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002774:	e013      	b.n	800279e <UART_SetConfig+0x1be>
 8002776:	2302      	movs	r3, #2
 8002778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277c:	e00f      	b.n	800279e <UART_SetConfig+0x1be>
 800277e:	2304      	movs	r3, #4
 8002780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002784:	e00b      	b.n	800279e <UART_SetConfig+0x1be>
 8002786:	2308      	movs	r3, #8
 8002788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278c:	e007      	b.n	800279e <UART_SetConfig+0x1be>
 800278e:	2310      	movs	r3, #16
 8002790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002794:	bf00      	nop
 8002796:	e002      	b.n	800279e <UART_SetConfig+0x1be>
 8002798:	2310      	movs	r3, #16
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a51      	ldr	r2, [pc, #324]	; (80028e8 <UART_SetConfig+0x308>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f040 80fa 	bne.w	800299e <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d823      	bhi.n	80027fa <UART_SetConfig+0x21a>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0x1d8>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	080027fb 	.word	0x080027fb
 80027c0:	080027e5 	.word	0x080027e5
 80027c4:	080027fb 	.word	0x080027fb
 80027c8:	080027eb 	.word	0x080027eb
 80027cc:	080027fb 	.word	0x080027fb
 80027d0:	080027fb 	.word	0x080027fb
 80027d4:	080027fb 	.word	0x080027fb
 80027d8:	080027f3 	.word	0x080027f3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80027dc:	f7fe ff94 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80027e0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027e2:	e00d      	b.n	8002800 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80027e4:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <UART_SetConfig+0x318>)
 80027e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027e8:	e00a      	b.n	8002800 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80027ea:	f7fe fef7 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 80027ee:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027f0:	e006      	b.n	8002800 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80027f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027f8:	e002      	b.n	8002800 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	76fb      	strb	r3, [r7, #27]
        break;
 80027fe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 81c6 	beq.w	8002b94 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d305      	bcc.n	8002824 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	d902      	bls.n	800282a <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	76fb      	strb	r3, [r7, #27]
 8002828:	e1b4      	b.n	8002b94 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 800282a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800282e:	2b08      	cmp	r3, #8
 8002830:	f200 80a2 	bhi.w	8002978 <UART_SetConfig+0x398>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <UART_SetConfig+0x25c>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002861 	.word	0x08002861
 8002840:	08002979 	.word	0x08002979
 8002844:	080028af 	.word	0x080028af
 8002848:	08002979 	.word	0x08002979
 800284c:	08002901 	.word	0x08002901
 8002850:	08002979 	.word	0x08002979
 8002854:	08002979 	.word	0x08002979
 8002858:	08002979 	.word	0x08002979
 800285c:	0800294f 	.word	0x0800294f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002860:	f7fe ff52 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8002864:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	0214      	lsls	r4, r2, #8
 8002878:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800287c:	020b      	lsls	r3, r1, #8
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6852      	ldr	r2, [r2, #4]
 8002882:	0852      	lsrs	r2, r2, #1
 8002884:	4611      	mov	r1, r2
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	eb13 0b01 	adds.w	fp, r3, r1
 800288e:	eb44 0c02 	adc.w	ip, r4, r2
 8002892:	4658      	mov	r0, fp
 8002894:	4661      	mov	r1, ip
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f04f 0400 	mov.w	r4, #0
 800289e:	461a      	mov	r2, r3
 80028a0:	4623      	mov	r3, r4
 80028a2:	f7fd fc93 	bl	80001cc <__aeabi_uldivmod>
 80028a6:	4603      	mov	r3, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80028ac:	e067      	b.n	800297e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	f04f 0400 	mov.w	r4, #0
 80028b8:	4910      	ldr	r1, [pc, #64]	; (80028fc <UART_SetConfig+0x31c>)
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	eb13 0b01 	adds.w	fp, r3, r1
 80028c2:	eb44 0c02 	adc.w	ip, r4, r2
 80028c6:	4658      	mov	r0, fp
 80028c8:	4661      	mov	r1, ip
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f04f 0400 	mov.w	r4, #0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4623      	mov	r3, r4
 80028d6:	f7fd fc79 	bl	80001cc <__aeabi_uldivmod>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80028e0:	e04d      	b.n	800297e <UART_SetConfig+0x39e>
 80028e2:	bf00      	nop
 80028e4:	efff69f3 	.word	0xefff69f3
 80028e8:	40008000 	.word	0x40008000
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40004400 	.word	0x40004400
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002900:	f7fe fe6c 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8002904:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0214      	lsls	r4, r2, #8
 8002918:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800291c:	020b      	lsls	r3, r1, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6852      	ldr	r2, [r2, #4]
 8002922:	0852      	lsrs	r2, r2, #1
 8002924:	4611      	mov	r1, r2
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	eb13 0b01 	adds.w	fp, r3, r1
 800292e:	eb44 0c02 	adc.w	ip, r4, r2
 8002932:	4658      	mov	r0, fp
 8002934:	4661      	mov	r1, ip
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f04f 0400 	mov.w	r4, #0
 800293e:	461a      	mov	r2, r3
 8002940:	4623      	mov	r3, r4
 8002942:	f7fd fc43 	bl	80001cc <__aeabi_uldivmod>
 8002946:	4603      	mov	r3, r0
 8002948:	460c      	mov	r4, r1
 800294a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800294c:	e017      	b.n	800297e <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800295c:	f144 0100 	adc.w	r1, r4, #0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	461a      	mov	r2, r3
 800296a:	4623      	mov	r3, r4
 800296c:	f7fd fc2e 	bl	80001cc <__aeabi_uldivmod>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002976:	e002      	b.n	800297e <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	76fb      	strb	r3, [r7, #27]
            break;
 800297c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002984:	d308      	bcc.n	8002998 <UART_SetConfig+0x3b8>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298c:	d204      	bcs.n	8002998 <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	e0fd      	b.n	8002b94 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	76fb      	strb	r3, [r7, #27]
 800299c:	e0fa      	b.n	8002b94 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	f040 8083 	bne.w	8002ab0 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 80029aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d85e      	bhi.n	8002a70 <UART_SetConfig+0x490>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <UART_SetConfig+0x3d8>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029dd 	.word	0x080029dd
 80029bc:	080029fd 	.word	0x080029fd
 80029c0:	08002a1d 	.word	0x08002a1d
 80029c4:	08002a71 	.word	0x08002a71
 80029c8:	08002a39 	.word	0x08002a39
 80029cc:	08002a71 	.word	0x08002a71
 80029d0:	08002a71 	.word	0x08002a71
 80029d4:	08002a71 	.word	0x08002a71
 80029d8:	08002a59 	.word	0x08002a59
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029dc:	f7fe fe94 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80029e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	005a      	lsls	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029fa:	e03c      	b.n	8002a76 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029fc:	f7fe fe9a 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8002a00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a1a:	e02c      	b.n	8002a76 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002a26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6852      	ldr	r2, [r2, #4]
 8002a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a36:	e01e      	b.n	8002a76 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a38:	f7fe fdd0 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8002a3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a56:	e00e      	b.n	8002a76 <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a6e:	e002      	b.n	8002a76 <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	76fb      	strb	r3, [r7, #27]
        break;
 8002a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d916      	bls.n	8002aaa <UART_SetConfig+0x4ca>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d212      	bcs.n	8002aaa <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f023 030f 	bic.w	r3, r3, #15
 8002a8c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	89fa      	ldrh	r2, [r7, #14]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	e074      	b.n	8002b94 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	76fb      	strb	r3, [r7, #27]
 8002aae:	e071      	b.n	8002b94 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8002ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d85c      	bhi.n	8002b72 <UART_SetConfig+0x592>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x4e0>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ae5 	.word	0x08002ae5
 8002ac4:	08002b03 	.word	0x08002b03
 8002ac8:	08002b21 	.word	0x08002b21
 8002acc:	08002b73 	.word	0x08002b73
 8002ad0:	08002b3d 	.word	0x08002b3d
 8002ad4:	08002b73 	.word	0x08002b73
 8002ad8:	08002b73 	.word	0x08002b73
 8002adc:	08002b73 	.word	0x08002b73
 8002ae0:	08002b5b 	.word	0x08002b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7fe fe10 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	085a      	lsrs	r2, r3, #1
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b00:	e03a      	b.n	8002b78 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b02:	f7fe fe17 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 8002b06:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	085a      	lsrs	r2, r3, #1
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	441a      	add	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b1e:	e02b      	b.n	8002b78 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b2a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6852      	ldr	r2, [r2, #4]
 8002b32:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b3a:	e01d      	b.n	8002b78 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3c:	f7fe fd4e 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8002b40:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	085a      	lsrs	r2, r3, #1
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b58:	e00e      	b.n	8002b78 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b70:	e002      	b.n	8002b78 <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	76fb      	strb	r3, [r7, #27]
        break;
 8002b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d908      	bls.n	8002b90 <UART_SetConfig+0x5b0>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d204      	bcs.n	8002b90 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	e001      	b.n	8002b94 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ba0:	7efb      	ldrb	r3, [r7, #27]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002caa:	d10a      	bne.n	8002cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002cfe:	f7fd fc49 	bl	8000594 <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d10e      	bne.n	8002d30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f82a 	bl	8002d7a <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e020      	b.n	8002d72 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d10e      	bne.n	8002d5c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f814 	bl	8002d7a <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e00a      	b.n	8002d72 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8a:	e05d      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d92:	d059      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fd fbfe 	bl	8000594 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <UART_WaitOnFlagUntilTimeout+0x30>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11b      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002db8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e042      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02b      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfe:	d123      	bne.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e08:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e00f      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d092      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <MX_GPIO_Init+0xd4>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed8:	f7fd fdf2 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2108      	movs	r1, #8
 8002ee0:	4819      	ldr	r0, [pc, #100]	; (8002f48 <MX_GPIO_Init+0xd8>)
 8002ee2:	f7fd fded 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efc:	f7fd fc5e 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DC_Pin|RST_Pin;
 8002f00:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 8002f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4619      	mov	r1, r3
 8002f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1c:	f7fd fc4e 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002f20:	2308      	movs	r3, #8
 8002f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <MX_GPIO_Init+0xd8>)
 8002f38:	f7fd fc40 	bl	80007bc <HAL_GPIO_Init>

}
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	48000400 	.word	0x48000400

08002f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f50:	f7fd fabc 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f54:	f000 f80a 	bl	8002f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f58:	f7ff ff8a 	bl	8002e70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002f5c:	f000 f8c2 	bl	80030e4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002f60:	f000 fa46 	bl	80033f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  		EPD_1in02d_test();
//
//  		EPD_1in54_test();
  		EPD_1in54_V2_test();
 8002f64:	f000 fb36 	bl	80035d4 <EPD_1in54_V2_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <main+0x1c>
	...

08002f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0ac      	sub	sp, #176	; 0xb0
 8002f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f76:	2244      	movs	r2, #68	; 0x44
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fdea 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2254      	movs	r2, #84	; 0x54
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fddc 	bl	8003b54 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002f9c:	f7fd fda8 	bl	8000af0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <SystemClock_Config+0x100>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <SystemClock_Config+0x100>)
 8002fa8:	f023 0318 	bic.w	r3, r3, #24
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002fb0:	2314      	movs	r3, #20
 8002fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002fc4:	2360      	movs	r3, #96	; 0x60
 8002fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002fdc:	2310      	movs	r3, #16
 8002fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fded 	bl	8000bd8 <HAL_RCC_OscConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003004:	f000 f866 	bl	80030d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003008:	230f      	movs	r3, #15
 800300a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300c:	2303      	movs	r3, #3
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003010:	2300      	movs	r3, #0
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003014:	2300      	movs	r3, #0
 8003016:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003018:	2300      	movs	r3, #0
 800301a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800301c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe f9f8 	bl	8001418 <HAL_RCC_ClockConfig>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800302e:	f000 f851 	bl	80030d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003032:	2302      	movs	r3, #2
 8003034:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fbef 	bl	8001820 <HAL_RCCEx_PeriphCLKConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003048:	f000 f844 	bl	80030d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800304c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003050:	f7fd fd6c 	bl	8000b2c <HAL_PWREx_ControlVoltageScaling>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800305a:	f000 f83b 	bl	80030d4 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800305e:	f7fe fdd1 	bl	8001c04 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003062:	bf00      	nop
 8003064:	37b0      	adds	r7, #176	; 0xb0
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000

08003070 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800307e:	f107 010c 	add.w	r1, r7, #12
 8003082:	230a      	movs	r3, #10
 8003084:	2201      	movs	r2, #1
 8003086:	4804      	ldr	r0, [pc, #16]	; (8003098 <__io_putchar+0x28>)
 8003088:	f7ff fa17 	bl	80024ba <HAL_UART_Transmit>
	return ch;
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000100 	.word	0x20000100

0800309c <_write>:

int _write(int file,char *ptr, int len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e009      	b.n	80030c2 <_write+0x26>
	{
	__io_putchar(*ptr++);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	60ba      	str	r2, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ffda 	bl	8003070 <__io_putchar>
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbf1      	blt.n	80030ae <_write+0x12>
	}
	return len;
 80030ca:	687b      	ldr	r3, [r7, #4]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <MX_SPI1_Init+0x74>)
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <MX_SPI1_Init+0x78>)
 80030ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <MX_SPI1_Init+0x74>)
 80030f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <MX_SPI1_Init+0x74>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <MX_SPI1_Init+0x74>)
 80030fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003102:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <MX_SPI1_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <MX_SPI1_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_SPI1_Init+0x74>)
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <MX_SPI1_Init+0x74>)
 800311a:	2228      	movs	r2, #40	; 0x28
 800311c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_SPI1_Init+0x74>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_SPI1_Init+0x74>)
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_SPI1_Init+0x74>)
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_SPI1_Init+0x74>)
 8003132:	220a      	movs	r2, #10
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_SPI1_Init+0x74>)
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_SPI1_Init+0x74>)
 800313e:	2208      	movs	r2, #8
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_SPI1_Init+0x74>)
 8003144:	f7fe fe5e 	bl	8001e04 <HAL_SPI_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800314e:	f7ff ffc1 	bl	80030d4 <Error_Handler>
  }

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000009c 	.word	0x2000009c
 800315c:	40013000 	.word	0x40013000

08003160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_SPI_MspInit+0x7c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d128      	bne.n	80031d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 8003188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800318c:	6613      	str	r3, [r2, #96]	; 0x60
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_SPI_MspInit+0x80>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80031b2:	2382      	movs	r3, #130	; 0x82
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031c2:	2305      	movs	r3, #5
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d0:	f7fd faf4 	bl	80007bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031d4:	bf00      	nop
 80031d6:	3728      	adds	r7, #40	; 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40013000 	.word	0x40013000
 80031e0:	40021000 	.word	0x40021000

080031e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_MspInit+0x44>)
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_MspInit+0x44>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6613      	str	r3, [r2, #96]	; 0x60
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_MspInit+0x44>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_MspInit+0x44>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <HAL_MspInit+0x44>)
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6593      	str	r3, [r2, #88]	; 0x58
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_MspInit+0x44>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800323e:	e7fe      	b.n	800323e <HardFault_Handler+0x4>

08003240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <MemManage_Handler+0x4>

08003246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <UsageFault_Handler+0x4>

08003252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003280:	f7fd f976 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}

08003288 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e00a      	b.n	80032b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800329a:	f3af 8000 	nop.w
 800329e:	4601      	mov	r1, r0
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	b2ca      	uxtb	r2, r1
 80032a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	dbf0      	blt.n	800329a <_read+0x12>
	}

return len;
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	return -1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ea:	605a      	str	r2, [r3, #4]
	return 0;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_isatty>:

int _isatty(int file)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
	return 1;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
	return 0;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x50>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_sbrk+0x16>
		heap_end = &end;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <_sbrk+0x50>)
 800333e:	4a10      	ldr	r2, [pc, #64]	; (8003380 <_sbrk+0x54>)
 8003340:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <_sbrk+0x50>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <_sbrk+0x50>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	466a      	mov	r2, sp
 8003352:	4293      	cmp	r3, r2
 8003354:	d907      	bls.n	8003366 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003356:	f000 fbc3 	bl	8003ae0 <__errno>
 800335a:	4602      	mov	r2, r0
 800335c:	230c      	movs	r3, #12
 800335e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003364:	e006      	b.n	8003374 <_sbrk+0x48>
	}

	heap_end += incr;
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <_sbrk+0x50>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	4a03      	ldr	r2, [pc, #12]	; (800337c <_sbrk+0x50>)
 8003370:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	2000008c 	.word	0x2000008c
 8003380:	200001a0 	.word	0x200001a0

08003384 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <SystemInit+0x64>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <SystemInit+0x64>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <SystemInit+0x68>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a13      	ldr	r2, [pc, #76]	; (80033ec <SystemInit+0x68>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <SystemInit+0x68>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <SystemInit+0x68>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <SystemInit+0x68>)
 80033b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80033b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80033b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <SystemInit+0x68>)
 80033bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <SystemInit+0x68>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <SystemInit+0x68>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <SystemInit+0x68>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SystemInit+0x64>)
 80033d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033da:	609a      	str	r2, [r3, #8]
#endif
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	40021000 	.word	0x40021000

080033f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <MX_USART2_UART_Init+0x58>)
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <MX_USART2_UART_Init+0x5c>)
 80033f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <MX_USART2_UART_Init+0x58>)
 80033fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <MX_USART2_UART_Init+0x58>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003416:	220c      	movs	r2, #12
 8003418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_USART2_UART_Init+0x58>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_USART2_UART_Init+0x58>)
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_USART2_UART_Init+0x58>)
 8003434:	f7fe fff3 	bl	800241e <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800343e:	f7ff fe49 	bl	80030d4 <Error_Handler>
  }

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000100 	.word	0x20000100
 800344c:	40004400 	.word	0x40004400

08003450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_UART_MspInit+0xa0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d13a      	bne.n	80034e8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_UART_MspInit+0xa4>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034a2:	2304      	movs	r3, #4
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b2:	2307      	movs	r3, #7
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f7fd f97c 	bl	80007bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80034d6:	2303      	movs	r3, #3
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e4:	f7fd f96a 	bl	80007bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40021000 	.word	0x40021000

080034f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003530 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80034fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80034fe:	e003      	b.n	8003508 <LoopCopyDataInit>

08003500 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003502:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003504:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003506:	3104      	adds	r1, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003508:	480b      	ldr	r0, [pc, #44]	; (8003538 <LoopForever+0xa>)
	ldr	r3, =_edata
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <LoopForever+0xe>)
	adds	r2, r0, r1
 800350c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800350e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003510:	d3f6      	bcc.n	8003500 <CopyDataInit>
	ldr	r2, =_sbss
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003514:	e002      	b.n	800351c <LoopFillZerobss>

08003516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003516:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003518:	f842 3b04 	str.w	r3, [r2], #4

0800351c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <LoopForever+0x16>)
	cmp	r2, r3
 800351e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003520:	d3f9      	bcc.n	8003516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003522:	f7ff ff2f 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003526:	f000 fae1 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800352a:	f7ff fd0f 	bl	8002f4c <main>

0800352e <LoopForever>:

LoopForever:
    b LoopForever
 800352e:	e7fe      	b.n	800352e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003530:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003534:	08005990 	.word	0x08005990
	ldr	r0, =_sdata
 8003538:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800353c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003540:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003544:	2000019c 	.word	0x2000019c

08003548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC1_IRQHandler>
	...

0800354c <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8003556:	1df9      	adds	r1, r7, #7
 8003558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355c:	2201      	movs	r2, #1
 800355e:	4803      	ldr	r0, [pc, #12]	; (800356c <DEV_SPI_WriteByte+0x20>)
 8003560:	f7fe fcda 	bl	8001f18 <HAL_SPI_Transmit>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	2000009c 	.word	0x2000009c

08003570 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800357a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357e:	f7fd fa9f 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2110      	movs	r1, #16
 8003586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358a:	f7fd fa99 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003598:	f7fd fa92 	bl	8000ac0 <HAL_GPIO_WritePin>
		return 0;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b0:	f7fd fa86 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2110      	movs	r1, #16
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035bc:	f7fd fa80 	bl	8000ac0 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ca:	f7fd fa79 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <EPD_1in54_V2_test>:
******************************************************************************/
#include "EPD_Test.h"
#include "EPD_1in54_V2.h"

int EPD_1in54_V2_test(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af02      	add	r7, sp, #8
    printf("EPD_1in54_V2_test Demo\r\n");
 80035da:	482a      	ldr	r0, [pc, #168]	; (8003684 <EPD_1in54_V2_test+0xb0>)
 80035dc:	f000 fbc6 	bl	8003d6c <puts>
    DEV_Module_Init();
 80035e0:	f7ff ffc6 	bl	8003570 <DEV_Module_Init>

    printf("e-Paper Init and Clear...\r\n");
 80035e4:	4828      	ldr	r0, [pc, #160]	; (8003688 <EPD_1in54_V2_test+0xb4>)
 80035e6:	f000 fbc1 	bl	8003d6c <puts>
    EPD_1IN54_V2_Init();
 80035ea:	f000 f9b2 	bl	8003952 <EPD_1IN54_V2_Init>
    EPD_1IN54_V2_Clear();
 80035ee:	f000 fa0d 	bl	8003a0c <EPD_1IN54_V2_Clear>
    DEV_Delay_ms(500);
 80035f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035f6:	f7fc ffd9 	bl	80005ac <HAL_Delay>

    //Create a new image cache
    UBYTE *BlackImage;
    /* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 80035fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80035fe:	80fb      	strh	r3, [r7, #6]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa96 	bl	8003b34 <malloc>
 8003608:	4603      	mov	r3, r0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <EPD_1in54_V2_test+0x4a>
        printf("Failed to apply for black memory...\r\n");
 8003612:	481e      	ldr	r0, [pc, #120]	; (800368c <EPD_1in54_V2_test+0xb8>)
 8003614:	f000 fbaa 	bl	8003d6c <puts>
        return -1;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800361c:	e02e      	b.n	800367c <EPD_1in54_V2_test+0xa8>
    }
    printf("Paint_NewImage\r\n");
 800361e:	481c      	ldr	r0, [pc, #112]	; (8003690 <EPD_1in54_V2_test+0xbc>)
 8003620:	f000 fba4 	bl	8003d6c <puts>
    Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 270, WHITE);
 8003624:	23ff      	movs	r3, #255	; 0xff
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800362c:	22c8      	movs	r2, #200	; 0xc8
 800362e:	21c8      	movs	r1, #200	; 0xc8
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	f000 f837 	bl	80036a4 <Paint_NewImage>

#if 1   //show image for array    
    printf("show image for array\r\n");
 8003636:	4817      	ldr	r0, [pc, #92]	; (8003694 <EPD_1in54_V2_test+0xc0>)
 8003638:	f000 fb98 	bl	8003d6c <puts>
    Paint_SelectImage(BlackImage);
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f000 f885 	bl	800374c <Paint_SelectImage>
    Paint_Clear(WHITE);
 8003642:	20ff      	movs	r0, #255	; 0xff
 8003644:	f000 f892 	bl	800376c <Paint_Clear>
    Paint_DrawBitMap(viy);
 8003648:	4813      	ldr	r0, [pc, #76]	; (8003698 <EPD_1in54_V2_test+0xc4>)
 800364a:	f000 f8c1 	bl	80037d0 <Paint_DrawBitMap>

    EPD_1IN54_V2_Display(BlackImage);
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	f000 fa03 	bl	8003a5a <EPD_1IN54_V2_Display>
    DEV_Delay_ms(2000);
 8003654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003658:	f7fc ffa8 	bl	80005ac <HAL_Delay>

//    printf("Clear...\r\n");
//    EPD_1IN54_V2_Init();
//    EPD_1IN54_V2_Clear();

    printf("Goto Sleep...\r\n");
 800365c:	480f      	ldr	r0, [pc, #60]	; (800369c <EPD_1in54_V2_test+0xc8>)
 800365e:	f000 fb85 	bl	8003d6c <puts>
    EPD_1IN54_V2_Sleep();
 8003662:	f000 fa2f 	bl	8003ac4 <EPD_1IN54_V2_Sleep>
    free(BlackImage);
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f000 fa6c 	bl	8003b44 <free>
    BlackImage = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	603b      	str	r3, [r7, #0]

    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <EPD_1in54_V2_test+0xcc>)
 8003672:	f000 fb7b 	bl	8003d6c <puts>
    DEV_Module_Exit();
 8003676:	f7ff ff94 	bl	80035a2 <DEV_Module_Exit>
    
    return 0;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	0800444c 	.word	0x0800444c
 8003688:	08004464 	.word	0x08004464
 800368c:	08004480 	.word	0x08004480
 8003690:	080044a8 	.word	0x080044a8
 8003694:	080044b8 	.word	0x080044b8
 8003698:	08004594 	.word	0x08004594
 800369c:	080044d0 	.word	0x080044d0
 80036a0:	080044e0 	.word	0x080044e0

080036a4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <Paint_NewImage+0xa4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80036c4:	4a20      	ldr	r2, [pc, #128]	; (8003748 <Paint_NewImage+0xa4>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <Paint_NewImage+0xa4>)
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <Paint_NewImage+0xa4>)
 80036d2:	893b      	ldrh	r3, [r7, #8]
 80036d4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <Paint_NewImage+0xa4>)
 80036d8:	8b3b      	ldrh	r3, [r7, #24]
 80036da:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <Paint_NewImage+0xa4>)
 80036de:	2202      	movs	r2, #2
 80036e0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <Paint_NewImage+0x52>
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	e004      	b.n	8003700 <Paint_NewImage+0x5c>
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	08db      	lsrs	r3, r3, #3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <Paint_NewImage+0xa4>)
 8003702:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8003704:	4a10      	ldr	r2, [pc, #64]	; (8003748 <Paint_NewImage+0xa4>)
 8003706:	893b      	ldrh	r3, [r7, #8]
 8003708:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800370a:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <Paint_NewImage+0xa4>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <Paint_NewImage+0xa4>)
 8003712:	2200      	movs	r2, #0
 8003714:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <Paint_NewImage+0x7e>
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	2bb4      	cmp	r3, #180	; 0xb4
 8003720:	d106      	bne.n	8003730 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <Paint_NewImage+0xa4>)
 8003724:	897b      	ldrh	r3, [r7, #10]
 8003726:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8003728:	4a07      	ldr	r2, [pc, #28]	; (8003748 <Paint_NewImage+0xa4>)
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	80d3      	strh	r3, [r2, #6]
 800372e:	e005      	b.n	800373c <Paint_NewImage+0x98>
    } else {
        Paint.Width = Height;
 8003730:	4a05      	ldr	r2, [pc, #20]	; (8003748 <Paint_NewImage+0xa4>)
 8003732:	893b      	ldrh	r3, [r7, #8]
 8003734:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8003736:	4a04      	ldr	r2, [pc, #16]	; (8003748 <Paint_NewImage+0xa4>)
 8003738:	897b      	ldrh	r3, [r7, #10]
 800373a:	80d3      	strh	r3, [r2, #6]
    }
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000180 	.word	0x20000180

0800374c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <Paint_SelectImage+0x1c>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000180 	.word	0x20000180

0800376c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
    for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003776:	2300      	movs	r3, #0
 8003778:	81fb      	strh	r3, [r7, #14]
 800377a:	e01c      	b.n	80037b6 <Paint_Clear+0x4a>
        for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800377c:	2300      	movs	r3, #0
 800377e:	81bb      	strh	r3, [r7, #12]
 8003780:	e011      	b.n	80037a6 <Paint_Clear+0x3a>
            UDOUBLE Addr = X + Y*Paint.WidthByte;
 8003782:	89ba      	ldrh	r2, [r7, #12]
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	4911      	ldr	r1, [pc, #68]	; (80037cc <Paint_Clear+0x60>)
 8003788:	8a49      	ldrh	r1, [r1, #18]
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = Color;
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <Paint_Clear+0x60>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
        for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80037a0:	89bb      	ldrh	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	81bb      	strh	r3, [r7, #12]
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <Paint_Clear+0x60>)
 80037a8:	8a5b      	ldrh	r3, [r3, #18]
 80037aa:	89ba      	ldrh	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3e8      	bcc.n	8003782 <Paint_Clear+0x16>
    for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	3301      	adds	r3, #1
 80037b4:	81fb      	strh	r3, [r7, #14]
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <Paint_Clear+0x60>)
 80037b8:	8a9b      	ldrh	r3, [r3, #20]
 80037ba:	89fa      	ldrh	r2, [r7, #14]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3dd      	bcc.n	800377c <Paint_Clear+0x10>
        }
    }
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000180 	.word	0x20000180

080037d0 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 80037dc:	2300      	movs	r3, #0
 80037de:	81bb      	strh	r3, [r7, #12]
 80037e0:	e01e      	b.n	8003820 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80037e2:	2300      	movs	r3, #0
 80037e4:	81fb      	strh	r3, [r7, #14]
 80037e6:	e013      	b.n	8003810 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 80037e8:	89fa      	ldrh	r2, [r7, #14]
 80037ea:	89bb      	ldrh	r3, [r7, #12]
 80037ec:	4912      	ldr	r1, [pc, #72]	; (8003838 <Paint_DrawBitMap+0x68>)
 80037ee:	8a49      	ldrh	r1, [r1, #18]
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	441a      	add	r2, r3
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <Paint_DrawBitMap+0x68>)
 8003800:	6819      	ldr	r1, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	440b      	add	r3, r1
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 800380a:	89fb      	ldrh	r3, [r7, #14]
 800380c:	3301      	adds	r3, #1
 800380e:	81fb      	strh	r3, [r7, #14]
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <Paint_DrawBitMap+0x68>)
 8003812:	8a5b      	ldrh	r3, [r3, #18]
 8003814:	89fa      	ldrh	r2, [r7, #14]
 8003816:	429a      	cmp	r2, r3
 8003818:	d3e6      	bcc.n	80037e8 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 800381a:	89bb      	ldrh	r3, [r7, #12]
 800381c:	3301      	adds	r3, #1
 800381e:	81bb      	strh	r3, [r7, #12]
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <Paint_DrawBitMap+0x68>)
 8003822:	8a9b      	ldrh	r3, [r3, #20]
 8003824:	89ba      	ldrh	r2, [r7, #12]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3db      	bcc.n	80037e2 <Paint_DrawBitMap+0x12>
        }
    }
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000180 	.word	0x20000180

0800383c <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003840:	2201      	movs	r2, #1
 8003842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800384a:	f7fd f939 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800384e:	20c8      	movs	r0, #200	; 0xc8
 8003850:	f7fc feac 	bl	80005ac <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800385a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800385e:	f7fd f92f 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(10);
 8003862:	200a      	movs	r0, #10
 8003864:	f7fc fea2 	bl	80005ac <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8003868:	2201      	movs	r2, #1
 800386a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003872:	f7fd f925 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8003876:	20c8      	movs	r0, #200	; 0xc8
 8003878:	f7fc fe98 	bl	80005ac <HAL_Delay>
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}

08003880 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003894:	f7fd f914 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8003898:	2200      	movs	r2, #0
 800389a:	2110      	movs	r1, #16
 800389c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a0:	f7fd f90e 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fe50 	bl	800354c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80038ac:	2201      	movs	r2, #1
 80038ae:	2110      	movs	r1, #16
 80038b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b4:	f7fd f904 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80038ca:	2201      	movs	r2, #1
 80038cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d4:	f7fd f8f4 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	2110      	movs	r1, #16
 80038dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e0:	f7fd f8ee 	bl	8000ac0 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fe30 	bl	800354c <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80038ec:	2201      	movs	r2, #1
 80038ee:	2110      	movs	r1, #16
 80038f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f4:	f7fd f8e4 	bl	8000ac0 <HAL_GPIO_WritePin>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8003904:	4809      	ldr	r0, [pc, #36]	; (800392c <EPD_1IN54_V2_ReadBusy+0x2c>)
 8003906:	f000 fa31 	bl	8003d6c <puts>
        // EPD_1IN54_V2_SendCommand(0x71);
        // busy = DEV_Digital_Read(EPD_BUSY_PIN);
        // busy = !(busy & 0x01);
    // } while(busy);
    // DEV_Delay_ms(200);
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800390a:	e002      	b.n	8003912 <EPD_1IN54_V2_ReadBusy+0x12>
        DEV_Delay_ms(100);
 800390c:	2064      	movs	r0, #100	; 0x64
 800390e:	f7fc fe4d 	bl	80005ac <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8003912:	2108      	movs	r1, #8
 8003914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003918:	f7fd f8ba 	bl	8000a90 <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d0f4      	beq.n	800390c <EPD_1IN54_V2_ReadBusy+0xc>
    }
    Debug("e-Paper busy release\r\n");
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <EPD_1IN54_V2_ReadBusy+0x30>)
 8003924:	f000 fa22 	bl	8003d6c <puts>
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	08004514 	.word	0x08004514
 8003930:	0800452c 	.word	0x0800452c

08003934 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 8003938:	2022      	movs	r0, #34	; 0x22
 800393a:	f7ff ffa1 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xF7);
 800393e:	20f7      	movs	r0, #247	; 0xf7
 8003940:	f7ff ffbe 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 8003944:	2020      	movs	r0, #32
 8003946:	f7ff ff9b 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800394a:	f7ff ffd9 	bl	8003900 <EPD_1IN54_V2_ReadBusy>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}

08003952 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 8003956:	f7ff ff71 	bl	800383c <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 800395a:	f7ff ffd1 	bl	8003900 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 800395e:	2012      	movs	r0, #18
 8003960:	f7ff ff8e 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 8003964:	f7ff ffcc 	bl	8003900 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 8003968:	2001      	movs	r0, #1
 800396a:	f7ff ff89 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800396e:	20c7      	movs	r0, #199	; 0xc7
 8003970:	f7ff ffa6 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 8003974:	2000      	movs	r0, #0
 8003976:	f7ff ffa3 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800397a:	2001      	movs	r0, #1
 800397c:	f7ff ffa0 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 8003980:	2011      	movs	r0, #17
 8003982:	f7ff ff7d 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8003986:	2001      	movs	r0, #1
 8003988:	f7ff ff9a 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x44); //set Ram-X address start/end position
 800398c:	2044      	movs	r0, #68	; 0x44
 800398e:	f7ff ff77 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 8003992:	2000      	movs	r0, #0
 8003994:	f7ff ff94 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x18);    //0x0C-->(18+1)*8=200
 8003998:	2018      	movs	r0, #24
 800399a:	f7ff ff91 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); //set Ram-Y address start/end position
 800399e:	2045      	movs	r0, #69	; 0x45
 80039a0:	f7ff ff6e 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);   //0xC7-->(199+1)=200
 80039a4:	20c7      	movs	r0, #199	; 0xc7
 80039a6:	f7ff ff8b 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff ff88 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7ff ff85 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7ff ff82 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80039bc:	203c      	movs	r0, #60	; 0x3c
 80039be:	f7ff ff5f 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7ff ff7c 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 80039c8:	2018      	movs	r0, #24
 80039ca:	f7ff ff59 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80039ce:	2080      	movs	r0, #128	; 0x80
 80039d0:	f7ff ff76 	bl	80038c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 80039d4:	2022      	movs	r0, #34	; 0x22
 80039d6:	f7ff ff53 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 80039da:	20b1      	movs	r0, #177	; 0xb1
 80039dc:	f7ff ff70 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80039e0:	2020      	movs	r0, #32
 80039e2:	f7ff ff4d 	bl	8003880 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 80039e6:	204e      	movs	r0, #78	; 0x4e
 80039e8:	f7ff ff4a 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 80039ec:	2000      	movs	r0, #0
 80039ee:	f7ff ff67 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;
 80039f2:	204f      	movs	r0, #79	; 0x4f
 80039f4:	f7ff ff44 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 80039f8:	20c7      	movs	r0, #199	; 0xc7
 80039fa:	f7ff ff61 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7ff ff5e 	bl	80038c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_ReadBusy();
 8003a04:	f7ff ff7c 	bl	8003900 <EPD_1IN54_V2_ReadBusy>
}
 8003a08:	bf00      	nop
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8003a12:	2319      	movs	r3, #25
 8003a14:	807b      	strh	r3, [r7, #2]
    Height = EPD_1IN54_V2_HEIGHT;
 8003a16:	23c8      	movs	r3, #200	; 0xc8
 8003a18:	803b      	strh	r3, [r7, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 8003a1a:	2024      	movs	r0, #36	; 0x24
 8003a1c:	f7ff ff30 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8003a20:	2300      	movs	r3, #0
 8003a22:	80fb      	strh	r3, [r7, #6]
 8003a24:	e00f      	b.n	8003a46 <EPD_1IN54_V2_Clear+0x3a>
        for (UWORD i = 0; i < Width; i++) {
 8003a26:	2300      	movs	r3, #0
 8003a28:	80bb      	strh	r3, [r7, #4]
 8003a2a:	e005      	b.n	8003a38 <EPD_1IN54_V2_Clear+0x2c>
            EPD_1IN54_V2_SendData(0XFF);
 8003a2c:	20ff      	movs	r0, #255	; 0xff
 8003a2e:	f7ff ff47 	bl	80038c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003a32:	88bb      	ldrh	r3, [r7, #4]
 8003a34:	3301      	adds	r3, #1
 8003a36:	80bb      	strh	r3, [r7, #4]
 8003a38:	88ba      	ldrh	r2, [r7, #4]
 8003a3a:	887b      	ldrh	r3, [r7, #2]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d3f5      	bcc.n	8003a2c <EPD_1IN54_V2_Clear+0x20>
    for (UWORD j = 0; j < Height; j++) {
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	3301      	adds	r3, #1
 8003a44:	80fb      	strh	r3, [r7, #6]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	883b      	ldrh	r3, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d3eb      	bcc.n	8003a26 <EPD_1IN54_V2_Clear+0x1a>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8003a4e:	f7ff ff71 	bl	8003934 <EPD_1IN54_V2_TurnOnDisplay>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 8003a62:	2319      	movs	r3, #25
 8003a64:	827b      	strh	r3, [r7, #18]
    Height = EPD_1IN54_V2_HEIGHT;
 8003a66:	23c8      	movs	r3, #200	; 0xc8
 8003a68:	823b      	strh	r3, [r7, #16]

    UDOUBLE Addr = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 8003a6e:	2024      	movs	r0, #36	; 0x24
 8003a70:	f7ff ff06 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8003a74:	2300      	movs	r3, #0
 8003a76:	82fb      	strh	r3, [r7, #22]
 8003a78:	e01a      	b.n	8003ab0 <EPD_1IN54_V2_Display+0x56>
        for (UWORD i = 0; i < Width; i++) {
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	82bb      	strh	r3, [r7, #20]
 8003a7e:	e010      	b.n	8003aa2 <EPD_1IN54_V2_Display+0x48>
            Addr = i + j * Width;
 8003a80:	8aba      	ldrh	r2, [r7, #20]
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	8a79      	ldrh	r1, [r7, #18]
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff12 	bl	80038c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8003a9c:	8abb      	ldrh	r3, [r7, #20]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	82bb      	strh	r3, [r7, #20]
 8003aa2:	8aba      	ldrh	r2, [r7, #20]
 8003aa4:	8a7b      	ldrh	r3, [r7, #18]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d3ea      	bcc.n	8003a80 <EPD_1IN54_V2_Display+0x26>
    for (UWORD j = 0; j < Height; j++) {
 8003aaa:	8afb      	ldrh	r3, [r7, #22]
 8003aac:	3301      	adds	r3, #1
 8003aae:	82fb      	strh	r3, [r7, #22]
 8003ab0:	8afa      	ldrh	r2, [r7, #22]
 8003ab2:	8a3b      	ldrh	r3, [r7, #16]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3e0      	bcc.n	8003a7a <EPD_1IN54_V2_Display+0x20>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8003ab8:	f7ff ff3c 	bl	8003934 <EPD_1IN54_V2_TurnOnDisplay>
}
 8003abc:	bf00      	nop
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); //enter deep sleep
 8003ac8:	2010      	movs	r0, #16
 8003aca:	f7ff fed9 	bl	8003880 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f7ff fef6 	bl	80038c0 <EPD_1IN54_V2_SendData>
    DEV_Delay_ms(100);
 8003ad4:	2064      	movs	r0, #100	; 0x64
 8003ad6:	f7fc fd69 	bl	80005ac <HAL_Delay>
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <__errno>:
 8003ae0:	4b01      	ldr	r3, [pc, #4]	; (8003ae8 <__errno+0x8>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4e0d      	ldr	r6, [pc, #52]	; (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	; (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1ba4      	subs	r4, r4, r6
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2500      	movs	r5, #0
 8003af8:	42a5      	cmp	r5, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4e0b      	ldr	r6, [pc, #44]	; (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 fc98 	bl	8004434 <_init>
 8003b04:	1ba4      	subs	r4, r4, r6
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2500      	movs	r5, #0
 8003b0a:	42a5      	cmp	r5, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b14:	4798      	blx	r3
 8003b16:	3501      	adds	r5, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b1e:	4798      	blx	r3
 8003b20:	3501      	adds	r5, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08005988 	.word	0x08005988
 8003b28:	08005988 	.word	0x08005988
 8003b2c:	08005988 	.word	0x08005988
 8003b30:	0800598c 	.word	0x0800598c

08003b34 <malloc>:
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <malloc+0xc>)
 8003b36:	4601      	mov	r1, r0
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f000 b861 	b.w	8003c00 <_malloc_r>
 8003b3e:	bf00      	nop
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <free>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <free+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f000 b80b 	b.w	8003b64 <_free_r>
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_free_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d045      	beq.n	8003bf8 <_free_r+0x94>
 8003b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b70:	1f0c      	subs	r4, r1, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfb8      	it	lt
 8003b76:	18e4      	addlt	r4, r4, r3
 8003b78:	f000 fbae 	bl	80042d8 <__malloc_lock>
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <_free_r+0x98>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	4610      	mov	r0, r2
 8003b82:	b933      	cbnz	r3, 8003b92 <_free_r+0x2e>
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6014      	str	r4, [r2, #0]
 8003b88:	4628      	mov	r0, r5
 8003b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8e:	f000 bba4 	b.w	80042da <__malloc_unlock>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d90c      	bls.n	8003bb0 <_free_r+0x4c>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	1862      	adds	r2, r4, r1
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bf04      	itt	eq
 8003b9e:	681a      	ldreq	r2, [r3, #0]
 8003ba0:	685b      	ldreq	r3, [r3, #4]
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	bf04      	itt	eq
 8003ba6:	1852      	addeq	r2, r2, r1
 8003ba8:	6022      	streq	r2, [r4, #0]
 8003baa:	6004      	str	r4, [r0, #0]
 8003bac:	e7ec      	b.n	8003b88 <_free_r+0x24>
 8003bae:	4613      	mov	r3, r2
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_free_r+0x54>
 8003bb4:	42a2      	cmp	r2, r4
 8003bb6:	d9fa      	bls.n	8003bae <_free_r+0x4a>
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	1858      	adds	r0, r3, r1
 8003bbc:	42a0      	cmp	r0, r4
 8003bbe:	d10b      	bne.n	8003bd8 <_free_r+0x74>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	4401      	add	r1, r0
 8003bc4:	1858      	adds	r0, r3, r1
 8003bc6:	4282      	cmp	r2, r0
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	d1dd      	bne.n	8003b88 <_free_r+0x24>
 8003bcc:	6810      	ldr	r0, [r2, #0]
 8003bce:	6852      	ldr	r2, [r2, #4]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	4401      	add	r1, r0
 8003bd4:	6019      	str	r1, [r3, #0]
 8003bd6:	e7d7      	b.n	8003b88 <_free_r+0x24>
 8003bd8:	d902      	bls.n	8003be0 <_free_r+0x7c>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	e7d3      	b.n	8003b88 <_free_r+0x24>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	1821      	adds	r1, r4, r0
 8003be4:	428a      	cmp	r2, r1
 8003be6:	bf04      	itt	eq
 8003be8:	6811      	ldreq	r1, [r2, #0]
 8003bea:	6852      	ldreq	r2, [r2, #4]
 8003bec:	6062      	str	r2, [r4, #4]
 8003bee:	bf04      	itt	eq
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	605c      	str	r4, [r3, #4]
 8003bf6:	e7c7      	b.n	8003b88 <_free_r+0x24>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000090 	.word	0x20000090

08003c00 <_malloc_r>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	1ccd      	adds	r5, r1, #3
 8003c04:	f025 0503 	bic.w	r5, r5, #3
 8003c08:	3508      	adds	r5, #8
 8003c0a:	2d0c      	cmp	r5, #12
 8003c0c:	bf38      	it	cc
 8003c0e:	250c      	movcc	r5, #12
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	4606      	mov	r6, r0
 8003c14:	db01      	blt.n	8003c1a <_malloc_r+0x1a>
 8003c16:	42a9      	cmp	r1, r5
 8003c18:	d903      	bls.n	8003c22 <_malloc_r+0x22>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	f000 fb59 	bl	80042d8 <__malloc_lock>
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <_malloc_r+0xac>)
 8003c28:	6814      	ldr	r4, [r2, #0]
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	b991      	cbnz	r1, 8003c54 <_malloc_r+0x54>
 8003c2e:	4c20      	ldr	r4, [pc, #128]	; (8003cb0 <_malloc_r+0xb0>)
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	b91b      	cbnz	r3, 8003c3c <_malloc_r+0x3c>
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f8a1 	bl	8003d7c <_sbrk_r>
 8003c3a:	6020      	str	r0, [r4, #0]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f89c 	bl	8003d7c <_sbrk_r>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d124      	bne.n	8003c92 <_malloc_r+0x92>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	6033      	str	r3, [r6, #0]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 fb44 	bl	80042da <__malloc_unlock>
 8003c52:	e7e4      	b.n	8003c1e <_malloc_r+0x1e>
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	1b5b      	subs	r3, r3, r5
 8003c58:	d418      	bmi.n	8003c8c <_malloc_r+0x8c>
 8003c5a:	2b0b      	cmp	r3, #11
 8003c5c:	d90f      	bls.n	8003c7e <_malloc_r+0x7e>
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	50cd      	str	r5, [r1, r3]
 8003c62:	18cc      	adds	r4, r1, r3
 8003c64:	4630      	mov	r0, r6
 8003c66:	f000 fb38 	bl	80042da <__malloc_unlock>
 8003c6a:	f104 000b 	add.w	r0, r4, #11
 8003c6e:	1d23      	adds	r3, r4, #4
 8003c70:	f020 0007 	bic.w	r0, r0, #7
 8003c74:	1ac3      	subs	r3, r0, r3
 8003c76:	d0d3      	beq.n	8003c20 <_malloc_r+0x20>
 8003c78:	425a      	negs	r2, r3
 8003c7a:	50e2      	str	r2, [r4, r3]
 8003c7c:	e7d0      	b.n	8003c20 <_malloc_r+0x20>
 8003c7e:	428c      	cmp	r4, r1
 8003c80:	684b      	ldr	r3, [r1, #4]
 8003c82:	bf16      	itet	ne
 8003c84:	6063      	strne	r3, [r4, #4]
 8003c86:	6013      	streq	r3, [r2, #0]
 8003c88:	460c      	movne	r4, r1
 8003c8a:	e7eb      	b.n	8003c64 <_malloc_r+0x64>
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	6849      	ldr	r1, [r1, #4]
 8003c90:	e7cc      	b.n	8003c2c <_malloc_r+0x2c>
 8003c92:	1cc4      	adds	r4, r0, #3
 8003c94:	f024 0403 	bic.w	r4, r4, #3
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d005      	beq.n	8003ca8 <_malloc_r+0xa8>
 8003c9c:	1a21      	subs	r1, r4, r0
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 f86c 	bl	8003d7c <_sbrk_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d0cf      	beq.n	8003c48 <_malloc_r+0x48>
 8003ca8:	6025      	str	r5, [r4, #0]
 8003caa:	e7db      	b.n	8003c64 <_malloc_r+0x64>
 8003cac:	20000090 	.word	0x20000090
 8003cb0:	20000094 	.word	0x20000094

08003cb4 <_puts_r>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	460e      	mov	r6, r1
 8003cb8:	4605      	mov	r5, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_puts_r+0x10>
 8003cbc:	6983      	ldr	r3, [r0, #24]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_puts_r+0x10>
 8003cc0:	f000 fa1c 	bl	80040fc <__sinit>
 8003cc4:	69ab      	ldr	r3, [r5, #24]
 8003cc6:	68ac      	ldr	r4, [r5, #8]
 8003cc8:	b913      	cbnz	r3, 8003cd0 <_puts_r+0x1c>
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fa16 	bl	80040fc <__sinit>
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <_puts_r+0xac>)
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d117      	bne.n	8003d06 <_puts_r+0x52>
 8003cd6:	686c      	ldr	r4, [r5, #4]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	071b      	lsls	r3, r3, #28
 8003cdc:	d51d      	bpl.n	8003d1a <_puts_r+0x66>
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	b1db      	cbz	r3, 8003d1a <_puts_r+0x66>
 8003ce2:	3e01      	subs	r6, #1
 8003ce4:	68a3      	ldr	r3, [r4, #8]
 8003ce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	b9e9      	cbnz	r1, 8003d2c <_puts_r+0x78>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da2e      	bge.n	8003d52 <_puts_r+0x9e>
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	210a      	movs	r1, #10
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 f84f 	bl	8003d9c <__swbuf_r>
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d011      	beq.n	8003d26 <_puts_r+0x72>
 8003d02:	200a      	movs	r0, #10
 8003d04:	e011      	b.n	8003d2a <_puts_r+0x76>
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <_puts_r+0xb0>)
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	d101      	bne.n	8003d10 <_puts_r+0x5c>
 8003d0c:	68ac      	ldr	r4, [r5, #8]
 8003d0e:	e7e3      	b.n	8003cd8 <_puts_r+0x24>
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <_puts_r+0xb4>)
 8003d12:	429c      	cmp	r4, r3
 8003d14:	bf08      	it	eq
 8003d16:	68ec      	ldreq	r4, [r5, #12]
 8003d18:	e7de      	b.n	8003cd8 <_puts_r+0x24>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f88f 	bl	8003e40 <__swsetup_r>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d0dd      	beq.n	8003ce2 <_puts_r+0x2e>
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da04      	bge.n	8003d3a <_puts_r+0x86>
 8003d30:	69a2      	ldr	r2, [r4, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dc06      	bgt.n	8003d44 <_puts_r+0x90>
 8003d36:	290a      	cmp	r1, #10
 8003d38:	d004      	beq.n	8003d44 <_puts_r+0x90>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	7019      	strb	r1, [r3, #0]
 8003d42:	e7cf      	b.n	8003ce4 <_puts_r+0x30>
 8003d44:	4622      	mov	r2, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f828 	bl	8003d9c <__swbuf_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d1c9      	bne.n	8003ce4 <_puts_r+0x30>
 8003d50:	e7e9      	b.n	8003d26 <_puts_r+0x72>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	200a      	movs	r0, #10
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	7018      	strb	r0, [r3, #0]
 8003d5c:	e7e5      	b.n	8003d2a <_puts_r+0x76>
 8003d5e:	bf00      	nop
 8003d60:	08005940 	.word	0x08005940
 8003d64:	08005960 	.word	0x08005960
 8003d68:	08005920 	.word	0x08005920

08003d6c <puts>:
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <puts+0xc>)
 8003d6e:	4601      	mov	r1, r0
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f7ff bf9f 	b.w	8003cb4 <_puts_r>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <_sbrk_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4c06      	ldr	r4, [pc, #24]	; (8003d98 <_sbrk_r+0x1c>)
 8003d80:	2300      	movs	r3, #0
 8003d82:	4605      	mov	r5, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	f7ff fad0 	bl	800332c <_sbrk>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_sbrk_r+0x1a>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_sbrk_r+0x1a>
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	20000198 	.word	0x20000198

08003d9c <__swbuf_r>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	460e      	mov	r6, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	4605      	mov	r5, r0
 8003da4:	b118      	cbz	r0, 8003dae <__swbuf_r+0x12>
 8003da6:	6983      	ldr	r3, [r0, #24]
 8003da8:	b90b      	cbnz	r3, 8003dae <__swbuf_r+0x12>
 8003daa:	f000 f9a7 	bl	80040fc <__sinit>
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <__swbuf_r+0x98>)
 8003db0:	429c      	cmp	r4, r3
 8003db2:	d12a      	bne.n	8003e0a <__swbuf_r+0x6e>
 8003db4:	686c      	ldr	r4, [r5, #4]
 8003db6:	69a3      	ldr	r3, [r4, #24]
 8003db8:	60a3      	str	r3, [r4, #8]
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	071a      	lsls	r2, r3, #28
 8003dbe:	d52e      	bpl.n	8003e1e <__swbuf_r+0x82>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	b363      	cbz	r3, 8003e1e <__swbuf_r+0x82>
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1ac0      	subs	r0, r0, r3
 8003dca:	6963      	ldr	r3, [r4, #20]
 8003dcc:	b2f6      	uxtb	r6, r6
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	4637      	mov	r7, r6
 8003dd2:	dc04      	bgt.n	8003dde <__swbuf_r+0x42>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 f926 	bl	8004028 <_fflush_r>
 8003ddc:	bb28      	cbnz	r0, 8003e2a <__swbuf_r+0x8e>
 8003dde:	68a3      	ldr	r3, [r4, #8]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	60a3      	str	r3, [r4, #8]
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	6022      	str	r2, [r4, #0]
 8003dea:	701e      	strb	r6, [r3, #0]
 8003dec:	6963      	ldr	r3, [r4, #20]
 8003dee:	3001      	adds	r0, #1
 8003df0:	4283      	cmp	r3, r0
 8003df2:	d004      	beq.n	8003dfe <__swbuf_r+0x62>
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	07db      	lsls	r3, r3, #31
 8003df8:	d519      	bpl.n	8003e2e <__swbuf_r+0x92>
 8003dfa:	2e0a      	cmp	r6, #10
 8003dfc:	d117      	bne.n	8003e2e <__swbuf_r+0x92>
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f911 	bl	8004028 <_fflush_r>
 8003e06:	b190      	cbz	r0, 8003e2e <__swbuf_r+0x92>
 8003e08:	e00f      	b.n	8003e2a <__swbuf_r+0x8e>
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <__swbuf_r+0x9c>)
 8003e0c:	429c      	cmp	r4, r3
 8003e0e:	d101      	bne.n	8003e14 <__swbuf_r+0x78>
 8003e10:	68ac      	ldr	r4, [r5, #8]
 8003e12:	e7d0      	b.n	8003db6 <__swbuf_r+0x1a>
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <__swbuf_r+0xa0>)
 8003e16:	429c      	cmp	r4, r3
 8003e18:	bf08      	it	eq
 8003e1a:	68ec      	ldreq	r4, [r5, #12]
 8003e1c:	e7cb      	b.n	8003db6 <__swbuf_r+0x1a>
 8003e1e:	4621      	mov	r1, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 f80d 	bl	8003e40 <__swsetup_r>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0cc      	beq.n	8003dc4 <__swbuf_r+0x28>
 8003e2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e2e:	4638      	mov	r0, r7
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08005940 	.word	0x08005940
 8003e38:	08005960 	.word	0x08005960
 8003e3c:	08005920 	.word	0x08005920

08003e40 <__swsetup_r>:
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <__swsetup_r+0xcc>)
 8003e42:	b570      	push	{r4, r5, r6, lr}
 8003e44:	681d      	ldr	r5, [r3, #0]
 8003e46:	4606      	mov	r6, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b125      	cbz	r5, 8003e56 <__swsetup_r+0x16>
 8003e4c:	69ab      	ldr	r3, [r5, #24]
 8003e4e:	b913      	cbnz	r3, 8003e56 <__swsetup_r+0x16>
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f953 	bl	80040fc <__sinit>
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <__swsetup_r+0xd0>)
 8003e58:	429c      	cmp	r4, r3
 8003e5a:	d10f      	bne.n	8003e7c <__swsetup_r+0x3c>
 8003e5c:	686c      	ldr	r4, [r5, #4]
 8003e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	0715      	lsls	r5, r2, #28
 8003e66:	d42c      	bmi.n	8003ec2 <__swsetup_r+0x82>
 8003e68:	06d0      	lsls	r0, r2, #27
 8003e6a:	d411      	bmi.n	8003e90 <__swsetup_r+0x50>
 8003e6c:	2209      	movs	r2, #9
 8003e6e:	6032      	str	r2, [r6, #0]
 8003e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e74:	81a3      	strh	r3, [r4, #12]
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e7a:	e03e      	b.n	8003efa <__swsetup_r+0xba>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <__swsetup_r+0xd4>)
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	d101      	bne.n	8003e86 <__swsetup_r+0x46>
 8003e82:	68ac      	ldr	r4, [r5, #8]
 8003e84:	e7eb      	b.n	8003e5e <__swsetup_r+0x1e>
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <__swsetup_r+0xd8>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	bf08      	it	eq
 8003e8c:	68ec      	ldreq	r4, [r5, #12]
 8003e8e:	e7e6      	b.n	8003e5e <__swsetup_r+0x1e>
 8003e90:	0751      	lsls	r1, r2, #29
 8003e92:	d512      	bpl.n	8003eba <__swsetup_r+0x7a>
 8003e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e96:	b141      	cbz	r1, 8003eaa <__swsetup_r+0x6a>
 8003e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e9c:	4299      	cmp	r1, r3
 8003e9e:	d002      	beq.n	8003ea6 <__swsetup_r+0x66>
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff fe5f 	bl	8003b64 <_free_r>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6363      	str	r3, [r4, #52]	; 0x34
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	b94b      	cbnz	r3, 8003eda <__swsetup_r+0x9a>
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d003      	beq.n	8003eda <__swsetup_r+0x9a>
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 f9bf 	bl	8004258 <__smakebuf_r>
 8003eda:	89a2      	ldrh	r2, [r4, #12]
 8003edc:	f012 0301 	ands.w	r3, r2, #1
 8003ee0:	d00c      	beq.n	8003efc <__swsetup_r+0xbc>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60a3      	str	r3, [r4, #8]
 8003ee6:	6963      	ldr	r3, [r4, #20]
 8003ee8:	425b      	negs	r3, r3
 8003eea:	61a3      	str	r3, [r4, #24]
 8003eec:	6923      	ldr	r3, [r4, #16]
 8003eee:	b953      	cbnz	r3, 8003f06 <__swsetup_r+0xc6>
 8003ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ef4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ef8:	d1ba      	bne.n	8003e70 <__swsetup_r+0x30>
 8003efa:	bd70      	pop	{r4, r5, r6, pc}
 8003efc:	0792      	lsls	r2, r2, #30
 8003efe:	bf58      	it	pl
 8003f00:	6963      	ldrpl	r3, [r4, #20]
 8003f02:	60a3      	str	r3, [r4, #8]
 8003f04:	e7f2      	b.n	8003eec <__swsetup_r+0xac>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e7f7      	b.n	8003efa <__swsetup_r+0xba>
 8003f0a:	bf00      	nop
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	08005940 	.word	0x08005940
 8003f14:	08005960 	.word	0x08005960
 8003f18:	08005920 	.word	0x08005920

08003f1c <__sflush_r>:
 8003f1c:	898a      	ldrh	r2, [r1, #12]
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	4605      	mov	r5, r0
 8003f24:	0710      	lsls	r0, r2, #28
 8003f26:	460c      	mov	r4, r1
 8003f28:	d458      	bmi.n	8003fdc <__sflush_r+0xc0>
 8003f2a:	684b      	ldr	r3, [r1, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dc05      	bgt.n	8003f3c <__sflush_r+0x20>
 8003f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dc02      	bgt.n	8003f3c <__sflush_r+0x20>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	d0f9      	beq.n	8003f36 <__sflush_r+0x1a>
 8003f42:	2300      	movs	r3, #0
 8003f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f48:	682f      	ldr	r7, [r5, #0]
 8003f4a:	6a21      	ldr	r1, [r4, #32]
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	d032      	beq.n	8003fb6 <__sflush_r+0x9a>
 8003f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	075a      	lsls	r2, r3, #29
 8003f56:	d505      	bpl.n	8003f64 <__sflush_r+0x48>
 8003f58:	6863      	ldr	r3, [r4, #4]
 8003f5a:	1ac0      	subs	r0, r0, r3
 8003f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f5e:	b10b      	cbz	r3, 8003f64 <__sflush_r+0x48>
 8003f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f62:	1ac0      	subs	r0, r0, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	4602      	mov	r2, r0
 8003f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f6a:	6a21      	ldr	r1, [r4, #32]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b0      	blx	r6
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	d106      	bne.n	8003f84 <__sflush_r+0x68>
 8003f76:	6829      	ldr	r1, [r5, #0]
 8003f78:	291d      	cmp	r1, #29
 8003f7a:	d848      	bhi.n	800400e <__sflush_r+0xf2>
 8003f7c:	4a29      	ldr	r2, [pc, #164]	; (8004024 <__sflush_r+0x108>)
 8003f7e:	40ca      	lsrs	r2, r1
 8003f80:	07d6      	lsls	r6, r2, #31
 8003f82:	d544      	bpl.n	800400e <__sflush_r+0xf2>
 8003f84:	2200      	movs	r2, #0
 8003f86:	6062      	str	r2, [r4, #4]
 8003f88:	04d9      	lsls	r1, r3, #19
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	6022      	str	r2, [r4, #0]
 8003f8e:	d504      	bpl.n	8003f9a <__sflush_r+0x7e>
 8003f90:	1c42      	adds	r2, r0, #1
 8003f92:	d101      	bne.n	8003f98 <__sflush_r+0x7c>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b903      	cbnz	r3, 8003f9a <__sflush_r+0x7e>
 8003f98:	6560      	str	r0, [r4, #84]	; 0x54
 8003f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9c:	602f      	str	r7, [r5, #0]
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d0c9      	beq.n	8003f36 <__sflush_r+0x1a>
 8003fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	d002      	beq.n	8003fb0 <__sflush_r+0x94>
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff fdda 	bl	8003b64 <_free_r>
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb4:	e7c0      	b.n	8003f38 <__sflush_r+0x1c>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b0      	blx	r6
 8003fbc:	1c41      	adds	r1, r0, #1
 8003fbe:	d1c8      	bne.n	8003f52 <__sflush_r+0x36>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0c5      	beq.n	8003f52 <__sflush_r+0x36>
 8003fc6:	2b1d      	cmp	r3, #29
 8003fc8:	d001      	beq.n	8003fce <__sflush_r+0xb2>
 8003fca:	2b16      	cmp	r3, #22
 8003fcc:	d101      	bne.n	8003fd2 <__sflush_r+0xb6>
 8003fce:	602f      	str	r7, [r5, #0]
 8003fd0:	e7b1      	b.n	8003f36 <__sflush_r+0x1a>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	e7ad      	b.n	8003f38 <__sflush_r+0x1c>
 8003fdc:	690f      	ldr	r7, [r1, #16]
 8003fde:	2f00      	cmp	r7, #0
 8003fe0:	d0a9      	beq.n	8003f36 <__sflush_r+0x1a>
 8003fe2:	0793      	lsls	r3, r2, #30
 8003fe4:	680e      	ldr	r6, [r1, #0]
 8003fe6:	bf08      	it	eq
 8003fe8:	694b      	ldreq	r3, [r1, #20]
 8003fea:	600f      	str	r7, [r1, #0]
 8003fec:	bf18      	it	ne
 8003fee:	2300      	movne	r3, #0
 8003ff0:	eba6 0807 	sub.w	r8, r6, r7
 8003ff4:	608b      	str	r3, [r1, #8]
 8003ff6:	f1b8 0f00 	cmp.w	r8, #0
 8003ffa:	dd9c      	ble.n	8003f36 <__sflush_r+0x1a>
 8003ffc:	4643      	mov	r3, r8
 8003ffe:	463a      	mov	r2, r7
 8004000:	6a21      	ldr	r1, [r4, #32]
 8004002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004004:	4628      	mov	r0, r5
 8004006:	47b0      	blx	r6
 8004008:	2800      	cmp	r0, #0
 800400a:	dc06      	bgt.n	800401a <__sflush_r+0xfe>
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004018:	e78e      	b.n	8003f38 <__sflush_r+0x1c>
 800401a:	4407      	add	r7, r0
 800401c:	eba8 0800 	sub.w	r8, r8, r0
 8004020:	e7e9      	b.n	8003ff6 <__sflush_r+0xda>
 8004022:	bf00      	nop
 8004024:	20400001 	.word	0x20400001

08004028 <_fflush_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4605      	mov	r5, r0
 800402e:	460c      	mov	r4, r1
 8004030:	b1db      	cbz	r3, 800406a <_fflush_r+0x42>
 8004032:	b118      	cbz	r0, 800403c <_fflush_r+0x14>
 8004034:	6983      	ldr	r3, [r0, #24]
 8004036:	b90b      	cbnz	r3, 800403c <_fflush_r+0x14>
 8004038:	f000 f860 	bl	80040fc <__sinit>
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <_fflush_r+0x48>)
 800403e:	429c      	cmp	r4, r3
 8004040:	d109      	bne.n	8004056 <_fflush_r+0x2e>
 8004042:	686c      	ldr	r4, [r5, #4]
 8004044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004048:	b17b      	cbz	r3, 800406a <_fflush_r+0x42>
 800404a:	4621      	mov	r1, r4
 800404c:	4628      	mov	r0, r5
 800404e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004052:	f7ff bf63 	b.w	8003f1c <__sflush_r>
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <_fflush_r+0x4c>)
 8004058:	429c      	cmp	r4, r3
 800405a:	d101      	bne.n	8004060 <_fflush_r+0x38>
 800405c:	68ac      	ldr	r4, [r5, #8]
 800405e:	e7f1      	b.n	8004044 <_fflush_r+0x1c>
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <_fflush_r+0x50>)
 8004062:	429c      	cmp	r4, r3
 8004064:	bf08      	it	eq
 8004066:	68ec      	ldreq	r4, [r5, #12]
 8004068:	e7ec      	b.n	8004044 <_fflush_r+0x1c>
 800406a:	2000      	movs	r0, #0
 800406c:	bd38      	pop	{r3, r4, r5, pc}
 800406e:	bf00      	nop
 8004070:	08005940 	.word	0x08005940
 8004074:	08005960 	.word	0x08005960
 8004078:	08005920 	.word	0x08005920

0800407c <std>:
 800407c:	2300      	movs	r3, #0
 800407e:	b510      	push	{r4, lr}
 8004080:	4604      	mov	r4, r0
 8004082:	e9c0 3300 	strd	r3, r3, [r0]
 8004086:	6083      	str	r3, [r0, #8]
 8004088:	8181      	strh	r1, [r0, #12]
 800408a:	6643      	str	r3, [r0, #100]	; 0x64
 800408c:	81c2      	strh	r2, [r0, #14]
 800408e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004092:	6183      	str	r3, [r0, #24]
 8004094:	4619      	mov	r1, r3
 8004096:	2208      	movs	r2, #8
 8004098:	305c      	adds	r0, #92	; 0x5c
 800409a:	f7ff fd5b 	bl	8003b54 <memset>
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <std+0x38>)
 80040a0:	6263      	str	r3, [r4, #36]	; 0x24
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <std+0x3c>)
 80040a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <std+0x40>)
 80040a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <std+0x44>)
 80040ac:	6224      	str	r4, [r4, #32]
 80040ae:	6323      	str	r3, [r4, #48]	; 0x30
 80040b0:	bd10      	pop	{r4, pc}
 80040b2:	bf00      	nop
 80040b4:	080042dd 	.word	0x080042dd
 80040b8:	080042ff 	.word	0x080042ff
 80040bc:	08004337 	.word	0x08004337
 80040c0:	0800435b 	.word	0x0800435b

080040c4 <_cleanup_r>:
 80040c4:	4901      	ldr	r1, [pc, #4]	; (80040cc <_cleanup_r+0x8>)
 80040c6:	f000 b885 	b.w	80041d4 <_fwalk_reent>
 80040ca:	bf00      	nop
 80040cc:	08004029 	.word	0x08004029

080040d0 <__sfmoreglue>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	1e4a      	subs	r2, r1, #1
 80040d4:	2568      	movs	r5, #104	; 0x68
 80040d6:	4355      	muls	r5, r2
 80040d8:	460e      	mov	r6, r1
 80040da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040de:	f7ff fd8f 	bl	8003c00 <_malloc_r>
 80040e2:	4604      	mov	r4, r0
 80040e4:	b140      	cbz	r0, 80040f8 <__sfmoreglue+0x28>
 80040e6:	2100      	movs	r1, #0
 80040e8:	e9c0 1600 	strd	r1, r6, [r0]
 80040ec:	300c      	adds	r0, #12
 80040ee:	60a0      	str	r0, [r4, #8]
 80040f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040f4:	f7ff fd2e 	bl	8003b54 <memset>
 80040f8:	4620      	mov	r0, r4
 80040fa:	bd70      	pop	{r4, r5, r6, pc}

080040fc <__sinit>:
 80040fc:	6983      	ldr	r3, [r0, #24]
 80040fe:	b510      	push	{r4, lr}
 8004100:	4604      	mov	r4, r0
 8004102:	bb33      	cbnz	r3, 8004152 <__sinit+0x56>
 8004104:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004108:	6503      	str	r3, [r0, #80]	; 0x50
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <__sinit+0x58>)
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <__sinit+0x5c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6282      	str	r2, [r0, #40]	; 0x28
 8004112:	4298      	cmp	r0, r3
 8004114:	bf04      	itt	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	6183      	streq	r3, [r0, #24]
 800411a:	f000 f81f 	bl	800415c <__sfp>
 800411e:	6060      	str	r0, [r4, #4]
 8004120:	4620      	mov	r0, r4
 8004122:	f000 f81b 	bl	800415c <__sfp>
 8004126:	60a0      	str	r0, [r4, #8]
 8004128:	4620      	mov	r0, r4
 800412a:	f000 f817 	bl	800415c <__sfp>
 800412e:	2200      	movs	r2, #0
 8004130:	60e0      	str	r0, [r4, #12]
 8004132:	2104      	movs	r1, #4
 8004134:	6860      	ldr	r0, [r4, #4]
 8004136:	f7ff ffa1 	bl	800407c <std>
 800413a:	2201      	movs	r2, #1
 800413c:	2109      	movs	r1, #9
 800413e:	68a0      	ldr	r0, [r4, #8]
 8004140:	f7ff ff9c 	bl	800407c <std>
 8004144:	2202      	movs	r2, #2
 8004146:	2112      	movs	r1, #18
 8004148:	68e0      	ldr	r0, [r4, #12]
 800414a:	f7ff ff97 	bl	800407c <std>
 800414e:	2301      	movs	r3, #1
 8004150:	61a3      	str	r3, [r4, #24]
 8004152:	bd10      	pop	{r4, pc}
 8004154:	0800591c 	.word	0x0800591c
 8004158:	080040c5 	.word	0x080040c5

0800415c <__sfp>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <__sfp+0x70>)
 8004160:	681e      	ldr	r6, [r3, #0]
 8004162:	69b3      	ldr	r3, [r6, #24]
 8004164:	4607      	mov	r7, r0
 8004166:	b913      	cbnz	r3, 800416e <__sfp+0x12>
 8004168:	4630      	mov	r0, r6
 800416a:	f7ff ffc7 	bl	80040fc <__sinit>
 800416e:	3648      	adds	r6, #72	; 0x48
 8004170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004174:	3b01      	subs	r3, #1
 8004176:	d503      	bpl.n	8004180 <__sfp+0x24>
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	b133      	cbz	r3, 800418a <__sfp+0x2e>
 800417c:	6836      	ldr	r6, [r6, #0]
 800417e:	e7f7      	b.n	8004170 <__sfp+0x14>
 8004180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004184:	b16d      	cbz	r5, 80041a2 <__sfp+0x46>
 8004186:	3468      	adds	r4, #104	; 0x68
 8004188:	e7f4      	b.n	8004174 <__sfp+0x18>
 800418a:	2104      	movs	r1, #4
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ff9f 	bl	80040d0 <__sfmoreglue>
 8004192:	6030      	str	r0, [r6, #0]
 8004194:	2800      	cmp	r0, #0
 8004196:	d1f1      	bne.n	800417c <__sfp+0x20>
 8004198:	230c      	movs	r3, #12
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4604      	mov	r4, r0
 800419e:	4620      	mov	r0, r4
 80041a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <__sfp+0x74>)
 80041a4:	6665      	str	r5, [r4, #100]	; 0x64
 80041a6:	e9c4 5500 	strd	r5, r5, [r4]
 80041aa:	60a5      	str	r5, [r4, #8]
 80041ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80041b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80041b4:	2208      	movs	r2, #8
 80041b6:	4629      	mov	r1, r5
 80041b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041bc:	f7ff fcca 	bl	8003b54 <memset>
 80041c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041c8:	e7e9      	b.n	800419e <__sfp+0x42>
 80041ca:	bf00      	nop
 80041cc:	0800591c 	.word	0x0800591c
 80041d0:	ffff0001 	.word	0xffff0001

080041d4 <_fwalk_reent>:
 80041d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d8:	4680      	mov	r8, r0
 80041da:	4689      	mov	r9, r1
 80041dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041e0:	2600      	movs	r6, #0
 80041e2:	b914      	cbnz	r4, 80041ea <_fwalk_reent+0x16>
 80041e4:	4630      	mov	r0, r6
 80041e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80041ee:	3f01      	subs	r7, #1
 80041f0:	d501      	bpl.n	80041f6 <_fwalk_reent+0x22>
 80041f2:	6824      	ldr	r4, [r4, #0]
 80041f4:	e7f5      	b.n	80041e2 <_fwalk_reent+0xe>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d907      	bls.n	800420c <_fwalk_reent+0x38>
 80041fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004200:	3301      	adds	r3, #1
 8004202:	d003      	beq.n	800420c <_fwalk_reent+0x38>
 8004204:	4629      	mov	r1, r5
 8004206:	4640      	mov	r0, r8
 8004208:	47c8      	blx	r9
 800420a:	4306      	orrs	r6, r0
 800420c:	3568      	adds	r5, #104	; 0x68
 800420e:	e7ee      	b.n	80041ee <_fwalk_reent+0x1a>

08004210 <__swhatbuf_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	460e      	mov	r6, r1
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	2900      	cmp	r1, #0
 800421a:	b096      	sub	sp, #88	; 0x58
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	da07      	bge.n	8004232 <__swhatbuf_r+0x22>
 8004222:	2300      	movs	r3, #0
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	89b3      	ldrh	r3, [r6, #12]
 8004228:	061a      	lsls	r2, r3, #24
 800422a:	d410      	bmi.n	800424e <__swhatbuf_r+0x3e>
 800422c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004230:	e00e      	b.n	8004250 <__swhatbuf_r+0x40>
 8004232:	466a      	mov	r2, sp
 8004234:	f000 f8b8 	bl	80043a8 <_fstat_r>
 8004238:	2800      	cmp	r0, #0
 800423a:	dbf2      	blt.n	8004222 <__swhatbuf_r+0x12>
 800423c:	9a01      	ldr	r2, [sp, #4]
 800423e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004246:	425a      	negs	r2, r3
 8004248:	415a      	adcs	r2, r3
 800424a:	602a      	str	r2, [r5, #0]
 800424c:	e7ee      	b.n	800422c <__swhatbuf_r+0x1c>
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	2000      	movs	r0, #0
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	b016      	add	sp, #88	; 0x58
 8004256:	bd70      	pop	{r4, r5, r6, pc}

08004258 <__smakebuf_r>:
 8004258:	898b      	ldrh	r3, [r1, #12]
 800425a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800425c:	079d      	lsls	r5, r3, #30
 800425e:	4606      	mov	r6, r0
 8004260:	460c      	mov	r4, r1
 8004262:	d507      	bpl.n	8004274 <__smakebuf_r+0x1c>
 8004264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	2301      	movs	r3, #1
 800426e:	6163      	str	r3, [r4, #20]
 8004270:	b002      	add	sp, #8
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	ab01      	add	r3, sp, #4
 8004276:	466a      	mov	r2, sp
 8004278:	f7ff ffca 	bl	8004210 <__swhatbuf_r>
 800427c:	9900      	ldr	r1, [sp, #0]
 800427e:	4605      	mov	r5, r0
 8004280:	4630      	mov	r0, r6
 8004282:	f7ff fcbd 	bl	8003c00 <_malloc_r>
 8004286:	b948      	cbnz	r0, 800429c <__smakebuf_r+0x44>
 8004288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800428c:	059a      	lsls	r2, r3, #22
 800428e:	d4ef      	bmi.n	8004270 <__smakebuf_r+0x18>
 8004290:	f023 0303 	bic.w	r3, r3, #3
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	e7e3      	b.n	8004264 <__smakebuf_r+0xc>
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <__smakebuf_r+0x7c>)
 800429e:	62b3      	str	r3, [r6, #40]	; 0x28
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	6020      	str	r0, [r4, #0]
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	6163      	str	r3, [r4, #20]
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	6120      	str	r0, [r4, #16]
 80042b2:	b15b      	cbz	r3, 80042cc <__smakebuf_r+0x74>
 80042b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f887 	bl	80043cc <_isatty_r>
 80042be:	b128      	cbz	r0, 80042cc <__smakebuf_r+0x74>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	431d      	orrs	r5, r3
 80042d0:	81a5      	strh	r5, [r4, #12]
 80042d2:	e7cd      	b.n	8004270 <__smakebuf_r+0x18>
 80042d4:	080040c5 	.word	0x080040c5

080042d8 <__malloc_lock>:
 80042d8:	4770      	bx	lr

080042da <__malloc_unlock>:
 80042da:	4770      	bx	lr

080042dc <__sread>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	460c      	mov	r4, r1
 80042e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e4:	f000 f894 	bl	8004410 <_read_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	bfab      	itete	ge
 80042ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ee:	89a3      	ldrhlt	r3, [r4, #12]
 80042f0:	181b      	addge	r3, r3, r0
 80042f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042f6:	bfac      	ite	ge
 80042f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042fa:	81a3      	strhlt	r3, [r4, #12]
 80042fc:	bd10      	pop	{r4, pc}

080042fe <__swrite>:
 80042fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004302:	461f      	mov	r7, r3
 8004304:	898b      	ldrh	r3, [r1, #12]
 8004306:	05db      	lsls	r3, r3, #23
 8004308:	4605      	mov	r5, r0
 800430a:	460c      	mov	r4, r1
 800430c:	4616      	mov	r6, r2
 800430e:	d505      	bpl.n	800431c <__swrite+0x1e>
 8004310:	2302      	movs	r3, #2
 8004312:	2200      	movs	r2, #0
 8004314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004318:	f000 f868 	bl	80043ec <_lseek_r>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	4632      	mov	r2, r6
 800432a:	463b      	mov	r3, r7
 800432c:	4628      	mov	r0, r5
 800432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004332:	f000 b817 	b.w	8004364 <_write_r>

08004336 <__sseek>:
 8004336:	b510      	push	{r4, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433e:	f000 f855 	bl	80043ec <_lseek_r>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	bf15      	itete	ne
 8004348:	6560      	strne	r0, [r4, #84]	; 0x54
 800434a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800434e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004352:	81a3      	strheq	r3, [r4, #12]
 8004354:	bf18      	it	ne
 8004356:	81a3      	strhne	r3, [r4, #12]
 8004358:	bd10      	pop	{r4, pc}

0800435a <__sclose>:
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 b813 	b.w	8004388 <_close_r>
	...

08004364 <_write_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4c07      	ldr	r4, [pc, #28]	; (8004384 <_write_r+0x20>)
 8004368:	4605      	mov	r5, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	6022      	str	r2, [r4, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fe fe92 	bl	800309c <_write>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_write_r+0x1e>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b103      	cbz	r3, 8004382 <_write_r+0x1e>
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	20000198 	.word	0x20000198

08004388 <_close_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4c06      	ldr	r4, [pc, #24]	; (80043a4 <_close_r+0x1c>)
 800438c:	2300      	movs	r3, #0
 800438e:	4605      	mov	r5, r0
 8004390:	4608      	mov	r0, r1
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	f7fe ff95 	bl	80032c2 <_close>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_close_r+0x1a>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_close_r+0x1a>
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000198 	.word	0x20000198

080043a8 <_fstat_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4c07      	ldr	r4, [pc, #28]	; (80043c8 <_fstat_r+0x20>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4605      	mov	r5, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	f7fe ff90 	bl	80032da <_fstat>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_fstat_r+0x1c>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_fstat_r+0x1c>
 80043c2:	602b      	str	r3, [r5, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	20000198 	.word	0x20000198

080043cc <_isatty_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4c06      	ldr	r4, [pc, #24]	; (80043e8 <_isatty_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4605      	mov	r5, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	f7fe ff8f 	bl	80032fa <_isatty>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_isatty_r+0x1a>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_isatty_r+0x1a>
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000198 	.word	0x20000198

080043ec <_lseek_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4c07      	ldr	r4, [pc, #28]	; (800440c <_lseek_r+0x20>)
 80043f0:	4605      	mov	r5, r0
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	6022      	str	r2, [r4, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fe ff88 	bl	8003310 <_lseek>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_lseek_r+0x1e>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	b103      	cbz	r3, 800440a <_lseek_r+0x1e>
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000198 	.word	0x20000198

08004410 <_read_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4c07      	ldr	r4, [pc, #28]	; (8004430 <_read_r+0x20>)
 8004414:	4605      	mov	r5, r0
 8004416:	4608      	mov	r0, r1
 8004418:	4611      	mov	r1, r2
 800441a:	2200      	movs	r2, #0
 800441c:	6022      	str	r2, [r4, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	f7fe ff32 	bl	8003288 <_read>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_read_r+0x1e>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	b103      	cbz	r3, 800442e <_read_r+0x1e>
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000198 	.word	0x20000198

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
